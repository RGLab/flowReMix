plot(range, dbeta(range, 0.5 + a / 10, 3.1 + b / 10), type = "l")
plot(range, dbeta(range, 0.5, 3.1), type = "l")
lines(range, dbeta(range, 0.5 + a / 10, 3.1 + b / 10), type = "l")
lines(range, dbeta(range, a / 10, b / 10), type = "l")
a / 10 + b/10
expit(-1)
filenames <- as.list(dir(path = 'data analysis/results', pattern="rv144_18_*"))
filenames2 <- as.list(dir(path = 'data analysis/results', pattern="rv144_17_*"))
filenames3 <- as.list(dir(path = 'data analysis/results', pattern="rv144_16_*"))
filename
filenames
filenames <- filenames[-seq(from = 1, to = 17, by = 2)]
filenames2
filenames2 <- filenames2[-seq(from = 1, to = 17, by = 2)]
filenames3
filenames3 <- filesnames3[-c(2, 4, 6, 8, 10, 13, 15)]
filenames3 <- as.list(dir(path = 'data analysis/results', pattern="rv144_16_*"))
filenames <- filenames[-seq(from = 1, to = 17, by = 2)]
filenames2 <- filenames2[-seq(from = 1, to = 17, by = 2)]
filenames3 <- filesnames3[-c(2, 4, 6, 8, 10, 13, 15)]
filenames < c-(filenames, filenames2, filenames3)
filenames <- (filenames, filenames2, filenames3)
filenames <- c(filenames, filenames2, filenames3)
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
post <- Reduce("+", post) / length(filenames)
fit$data <- booldata
fit <- add_ptid(fit, ptid)
fit$posteriors[, -1] <- post
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccine, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- summary(fit, target = vaccine, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infect <- factor(as.character(infect), levels = c("INFECTED", "NON-INFECTED"))
infectResults <- summary(fit, target = hiv, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
infectResults$responseProb <- colMeans(fit$posteriors[, -1])
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
filenames <- as.list(dir(path = 'data analysis/results', pattern="rv144_18_*"))
filenames2 <- as.list(dir(path = 'data analysis/results', pattern="rv144_17_*"))
filenames <- filenames[-seq(from = 1, to = 17, by = 2)]
filenames2 <- filenames2[-seq(from = 1, to = 17, by = 2)]
filenames <- c(filenames, filenames2, filenames3)
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
post <- Reduce("+", post) / length(filenames)
fit$data <- booldata
fit <- add_ptid(fit, ptid)
fit$posteriors[, -1] <- post
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infect <- factor(as.character(infect), levels = c("INFECTED", "NON-INFECTED"))
infectResults <- summary(fit, target = hiv, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults$responseProb <- colMeans(fit$posteriors[, -1])
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
filenames <- as.list(dir(path = 'data analysis/results', pattern="rv144_18_*"))
filenames2 <- as.list(dir(path = 'data analysis/results', pattern="rv144_17_*"))
filenames3 <- as.list(dir(path = 'data analysis/results', pattern="rv144_16_*"))
filenames <- filenames[-seq(from = 1, to = 17, by = 2)]
filenames2 <- filenames2[-seq(from = 1, to = 17, by = 2)]
filenames3 <- filenames3[-c(2, 4, 6, 8, 10, 13, 15)]
filenames <- c(filenames, filenames2, filenames3)
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
filenames <- c(filenames, filenames2)
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
post <- Reduce("+", post) / length(filenames)
fit$data <- booldata
filenames <- as.list(dir(path = 'data analysis/results', pattern="rv144_18_*"))
filenames2 <- as.list(dir(path = 'data analysis/results', pattern="rv144_17_*"))
filenames3 <- as.list(dir(path = 'data analysis/results', pattern="rv144_16_*"))
filenames <- filenames[-seq(from = 1, to = 17, by = 2)]
filenames2 <- filenames2[-seq(from = 1, to = 17, by = 2)]
filenames3 <- filenames3[-c(2, 4, 6, 8, 10, 13, 15)]
filenames <- c(filenames, filenames2)
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
post <- Reduce("+", post) / length(filenames)
fit$data <- booldata
fit <- add_ptid(fit, ptid)
fit$posteriors[, -1] <- post
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccine, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- summary(fit, target = vaccine, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infect <- factor(as.character(infect), levels = c("INFECTED", "NON-INFECTED"))
infectResults <- summary(fit, target = hiv, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults$responseProb <- colMeans(fit$posteriors[, -1])
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
post <- list()
postList <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
postList[[i]] <- fit$posteriors[, -1]
}
samp <- sample.int(length(postList), length(postList))
samp
reps <- 100
aucs <- matrix(ncol = ncol(fit$posteriors) - 1, nrow = reps)
aucs
samp <- postList[sample.int(length(postList), length(postList), replace = TRUE)]
samp
aggregate(samp, "+")
post <- Reduce(samp, "+")
?Reduce
post <- Reduce("+", samp)
post
post <- Reduce("+", samp) / length(samp)
post
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infect <- factor(as.character(infect), levels = c("INFECTED", "NON-INFECTED"))
aucs[i, ] <- apply(post, 2, function(x) roc(infect ~ x)$auc)
aucs
reps <- 100
aucs <- matrix(ncol = ncol(fit$posteriors) - 1, nrow = reps)
rprob <- matrix(ncol = ncol(fit$posteriors) - 1, nrow = reps)
for(i in 1:reps) {
samp <- postList[sample.int(length(postList), length(postList), replace = TRUE)]
post <- Reduce("+", samp) / length(samp)
aucs[i, ] <- apply(post, 2, function(x) roc(infect ~ x)$auc)
rprob[i, ] <- colMeans(post)
}
aucs
hist(aucs[, 1])
hist(aucs[, 2])
hist(aucs[, 20])
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
load("data/rv144_booleans.rda")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# booldata <- merge(booldata, data.frame(ptid = correlates$ptid,
#                                        IgAprim = correlates$IgAprim,
#                                        V2prim = correlates$V2prim))
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
names(correlates)[1] <- "ptid"
vaccine <- correlates[, c(1, 62, 64)]
vaccine$ptid <- factor(vaccine$ptid, levels = levels(booldata$ptid))
booldata <- with(booldata, booldata[order(subset, ptid, stim, decreasing = FALSE), ])
booldata <- merge(booldata, vaccine, sort = FALSE)
booldata$hiv <- NA
booldata$hiv[booldata$infect.y == "INFECTED"] <- TRUE
booldata$hiv[booldata$infect.y == "NON-INFECTED"] <- FALSE
booldata <- with(booldata, booldata[order(subset, ptid, stim, decreasing = FALSE), ])
# Analysis -------------
library(flowReMix)
npost <- 1
niter <- 24
control <- flowReMix_control(updateLag = 10, nsamp = 40, initMHcoef = 2.5,
keepEach = 4,
nPosteriors = npost, centerCovariance = TRUE,
maxDispersion = 1000, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 4, isingInit = -log(99),
ncores = 2,
preAssignCoefs = 1,
prior = 1, isingWprior = TRUE,
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
booldata$stim <- factor(booldata$stim, levels = c("nonstim", "stim"))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = booldata,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations =  niter,
cluster_assignment = preAssignment,
parallel = TRUE,
verbose = TRUE, control = control))
preAssign <- function(dat) {
subsets <- unique(dat$population)
nSubsets <- length(subsets)
preAssign <- numeric(nSubsets)
prop <- dat$count / dat$parentcount
for(j in 1:nSubsets) {
negctrl <- prop[dat$stim == "negctrl" & dat$population == subsets[j]]
env <- prop[dat$stim == "env" & dat$population == subsets[j]]
preAssign[j] <- ifelse(env >= negctrl, -1, 0)
}
result <- data.frame(id = dat$ptid[1], subset = subsets, assign = preAssign)
return(result)
}
library(flowReMix)
library(pROC)
cummean <- function(x) cumsum(x) / 1:length(x)
data(rv144)
#set.seed(502)
omit <- paste("P", c(1001, 1013, 1019, 1023, 1031, 1034, 1039, 1045,
1060, 1095, 1099, 1100, 1109, 1177, 1180, 1187,
1201, 1215, 1216, 1224, 1227, 1232, 1242, 1284),
sep = "")
par(mfrow = c(1, 1), mar = rep(4, 4))
data <- rv144
data <- subset(data, !(ptid %in% omit))
leaves <- unique(data$population)
selected_populations = c(1:7)
data <- subset(data, population %in% leaves[selected_populations])
data$population <- factor(data$population)
data <- subset(data, stim != "sebctrl")
data$treatment <- as.numeric(data$stim == "env")
data$ptid <- as.numeric(data$ptid)
data$ptid[data$vaccine == "VACCINE"] <- data$ptid[data$vaccine == "VACCINE"] * 10^4
data$prop <- data$count / data$parentcount
data$population <- as.factor(data$population)
data <- data[order(data$population, data$ptid, data$stim, decreasing = FALSE), ]
data$treatment2 <- data$treatment
control <- flowReMix_control(updateLag = 4, nsamp = 50, initMHcoef = 1,
keepEach = 10, isingWprior = TRUE,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
initMethod = "robust", ncores = NULL,
seed = 10,
preAssignCoefs = 1)
data$stim <- factor(data$stim, levels = c("negctrl", "env"))
assignmentMat <- do.call("rbind", by(data, data$ptid, preAssign))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = population,
cluster_variable = stim,
data = data,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 8, parallel = TRUE,
cluster_assignment = TRUE,
verbose = FALSE, control = control))
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed w all.Robj")
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed wo ising.Robj")
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed wo random.Robj")
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed indepdent.Robj")
# Scatter plots -----------------
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
plot(fit, type = "scatter", target = vaccine, ncol = 3)
# ROC table -----------------
roctab <- summary(fit, type = "ROC", target = vaccine)
roctab[order(roctab$auc, decreasing = TRUE), ]
control <- flowReMix_control(updateLag = 4, nsamp = 50, initMHcoef = 1,
keepEach = 10, isingWprior = TRUE,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
initMethod = "robust", ncores = NULL,
seed = 10,
preAssignCoefs = 1)
data$stim <- factor(data$stim, levels = c("negctrl", "env"))
assignmentMat <- do.call("rbind", by(data, data$ptid, preAssign))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = population,
cluster_variable = stim,
data = data,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 8, parallel = TRUE,
cluster_assignment = TRUE,
verbose = FALSE, control = control))
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed w all.Robj")
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed wo ising.Robj")
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed wo random.Robj")
# save(fit, file = "Data Analysis/results/RV144 marginals dispersed indepdent.Robj")
# Scatter plots -----------------
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
plot(fit, type = "scatter", target = vaccine, ncol = 3)
# ROC table -----------------
roctab <- summary(fit, type = "ROC", target = vaccine)
roctab[order(roctab$auc, decreasing = TRUE), ]
file <- paste("results/rv144_20_niter", niter, "npost", npost, "seed", seed, ".Robj", sep = "")
seed <- 1
file <- paste("results/rv144_20_niter", niter, "npost", npost, "seed", seed, ".Robj", sep = "")
file
file <- paste("results/rv144_stab_20_niter", niter, "npost", npost,  "seed", seed,".Robj", sep = "")
seed
file
dim(configurations)
configurations <- expand.grid(niters = c(30, 60),
npost = c(3, 6),
seed = c(1:10))
configurations
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
load("data/rv144_booleans.rda")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# booldata <- merge(booldata, data.frame(ptid = correlates$ptid,
#                                        IgAprim = correlates$IgAprim,
#                                        V2prim = correlates$V2prim))
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
names(correlates)[1] <- "ptid"
vaccine <- correlates[, c(1, 62, 64)]
vaccine$ptid <- factor(vaccine$ptid, levels = levels(booldata$ptid))
booldata <- with(booldata, booldata[order(subset, ptid, stim, decreasing = FALSE), ])
booldata <- merge(booldata, vaccine, sort = FALSE)
booldata$hiv <- NA
booldata$hiv[booldata$infect.y == "INFECTED"] <- TRUE
booldata$hiv[booldata$infect.y == "NON-INFECTED"] <- FALSE
booldata <- with(booldata, booldata[order(subset, ptid, stim, decreasing = FALSE), ])
# Analysis -------------
library(flowReMix)
npost <- 1
niter <- 100
control <- flowReMix_control(updateLag = 10, nsamp = 40, initMHcoef = 2.5,
keepEach = 4,
nPosteriors = npost, centerCovariance = TRUE,
maxDispersion = 1000, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 4, isingInit = -log(99),
ncores = 2,
preAssignCoefs = 1,
prior = 1, isingWprior = TRUE,
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
booldata$stim <- factor(booldata$stim, levels = c("nonstim", "stim"))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = booldata,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations =  niter,
cluster_assignment = preAssignment,
parallel = TRUE,
verbose = TRUE, control = control))
ewlrkwe
