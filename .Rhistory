scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = Dependence),
size = 1) +
scale_fill_gradient2(low = "white", high = "red", limits = c(0.5, 1)) +
#scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 12, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), legend.position = "none")
nodes[order(nodes$auc),]
props <- countCovar / reps
table(props)
threshold <- 0.33
which(props > threshold, arr.ind = TRUE)
props[abs(props) <= threshold] <- 0
sum(props != 0) / 2
# Plotting graph ---------------------
require(GGally)
library(network)
library(sna)
network <- props
keep <- apply(network, 1, function(x) any(abs(x) > threshold))
network <- network[keep, keep]
net <- network(props)
nodes <- ggnet2(network, label = subsets[keep])$data
edges <- matrix(nrow = sum(network != 0)/2, ncol = 5)
p <- nrow(network)
row <- 1
for(j in 2:p) {
for(i in 1:(j-1)) {
if(network[i, j] != 0) {
edges[row, ] <- unlist(c(nodes[i, 6:7], nodes[j, 6:7], network[i, j]))
row <- row + 1
}
}
}
edges <- data.frame(edges)
names(edges) <- c("xstart", "ystart", "xend", "yend", "width")
coefficients <- sapply(fit$coefficients, function(x) x[2])
nodes$probs <- fit$levelProbs[keep]
nodes$auc <- aucs[keep]
names(edges)[5] <- "Dependence"
lims <- max(abs(props))
ggplot() +
scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = Dependence),
size = 1) +
scale_fill_gradient2(low = "white", high = "red", limits = c(0.5, 1)) +
#scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 12, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), legend.position = "none")
nodes[order(nodes$auc),]
props <- countCovar / reps
table(props)
threshold <- 0.5
which(props > threshold, arr.ind = TRUE)
props[abs(props) <= threshold] <- 0
sum(props != 0) / 2
# Plotting graph ---------------------
require(GGally)
library(network)
library(sna)
network <- props
keep <- apply(network, 1, function(x) any(abs(x) > threshold))
network <- network[keep, keep]
net <- network(props)
nodes <- ggnet2(network, label = subsets[keep])$data
edges <- matrix(nrow = sum(network != 0)/2, ncol = 5)
p <- nrow(network)
row <- 1
for(j in 2:p) {
for(i in 1:(j-1)) {
if(network[i, j] != 0) {
edges[row, ] <- unlist(c(nodes[i, 6:7], nodes[j, 6:7], network[i, j]))
row <- row + 1
}
}
}
edges <- data.frame(edges)
names(edges) <- c("xstart", "ystart", "xend", "yend", "width")
coefficients <- sapply(fit$coefficients, function(x) x[2])
nodes$probs <- fit$levelProbs[keep]
nodes$auc <- aucs[keep]
names(edges)[5] <- "Dependence"
lims <- max(abs(props))
ggplot() +
scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = Dependence),
size = 1) +
scale_fill_gradient2(low = "white", high = "red", limits = c(0.5, 1)) +
#scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 12, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), legend.position = "none")
nodes[order(nodes$auc),]
props <- countCovar / reps
table(props)
threshold <- 0.25
which(props > threshold, arr.ind = TRUE)
props[abs(props) <= threshold] <- 0
sum(props != 0) / 2
# Plotting graph ---------------------
require(GGally)
library(network)
library(sna)
network <- props
keep <- apply(network, 1, function(x) any(abs(x) > threshold))
network <- network[keep, keep]
net <- network(props)
nodes <- ggnet2(network, label = subsets[keep])$data
edges <- matrix(nrow = sum(network != 0)/2, ncol = 5)
p <- nrow(network)
row <- 1
for(j in 2:p) {
for(i in 1:(j-1)) {
if(network[i, j] != 0) {
edges[row, ] <- unlist(c(nodes[i, 6:7], nodes[j, 6:7], network[i, j]))
row <- row + 1
}
}
}
edges <- data.frame(edges)
names(edges) <- c("xstart", "ystart", "xend", "yend", "width")
coefficients <- sapply(fit$coefficients, function(x) x[2])
nodes$probs <- fit$levelProbs[keep]
nodes$auc <- aucs[keep]
names(edges)[5] <- "Dependence"
lims <- max(abs(props))
ggplot() +
scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = Dependence),
size = 1) +
scale_fill_gradient2(low = "white", high = "red", limits = c(0.5, 1)) +
#scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 12, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), legend.position = "none")
nodes[order(nodes$auc),]
all
save(fit, file = "data analysis/results/carT results.Robj")
all
ggplot() +
scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = Dependence),
size = 1) +
scale_fill_gradient2(low = "white", high = "red", limits = c(0.5, 1)) +
#scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 12, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), legend.position = "none")
require(ggplot2)
ggplot() +
scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = Dependence),
size = 1) +
scale_fill_gradient2(low = "white", high = "red", limits = c(0.5, 1)) +
#scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 12, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), legend.position = "none")
all
#save(fit, file = "data analysis/results/carT results.Robj")
require(pROC)
par(mfrow = c(3, 5), mar = rep(1, 4))
subsets <- names(fit$posteriors)[-1]
pvals <- numeric(length(subsets))
aucs <- pvals
for(i in 1:length(subsets)) {
rocfit <- roc(outcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
plot(rocfit, main = paste(paste(subsets[i], " ", round(auc, 3), " ", round(pval, 3))))
}
pvals
ks.test(pvals, punif)
outcome
n <- length(outcome)
tempoutcome <- outcome[order(runif(n))]
tempoutcome
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(j in 1:p) {
rocfit <- roc(outcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
ks.test(pvals, punif)
auc
pvals
p <- length(subsets)
n <- length(outcome)
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
pvals
ks.test(pvals, punif)
a <- ks.test(pvals, punif)
a
?ks.test
kspvals[m] <- ks.test(pvals, punif, alternative = "less")
kspvals
ks.test(pvals, punif, alternative = "less")
m <- 200
p <- length(subsets)
n <- length(outcome)
kspvals <- numeric(m)
for(j in 1:m) {
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[m] <- ks.test(pvals, punif, alternative = "less")
}
for(j in 1:m) {
cat("j", ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[m] <- ks.test(pvals, punif, alternative = "less")
}
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[m] <- ks.test(pvals, punif, alternative = "less")
}
kspvals
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "less")
}
a
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "less")$p.value
}
kspvals
ks.test
names(a)
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "less")[[2]]
}
kspvals
kspvals <- numeric(m)
kspvals
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "less")[[2]]
}
kspvals
pvals
sort(pvals)
tempoutcome
par(mfrow = c(3, 5), mar = rep(1, 4))
subsets <- names(fit$posteriors)[-1]
pvals <- numeric(length(subsets))
aucs <- pvals
for(i in 1:length(subsets)) {
rocfit <- roc(outcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
plot(rocfit, main = paste(paste(subsets[i], " ", round(auc, 3), " ", round(pval, 3))))
}
dataks <- ks.test(pvals, punif, alternative = "less")
dataks
dataks <- ks.test(pvals, punif, alternative = "less")[[2]]
dataks
dataks <- ks.test(pvals, punif, alternative = "greater")[[2]]
dataks
dataks <- ks.test(pvals, punif, alternative = "greater")[[2]]
dataks
m <- 200
p <- length(subsets)
n <- length(outcome)
kspvals <- numeric(m)
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "less")[[2]]
}
m <- 200
p <- length(subsets)
n <- length(outcome)
kspvals <- numeric(m)
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "greater")[[2]]
}
sort(pvals)
kspvals
kspvals
?ks.test
mean(kspvals < dataks)
mean(kspvals  dataks)
mean(kspvals <= dataks)
m <- 400
p <- length(subsets)
n <- length(outcome)
kspvals <- numeric(m)
for(j in 1:m) {
cat(j, ' ')
aucs <- numeric(p)
pvals <- numeric(p)
tempoutcome <- outcome[order(runif(n))]
for(i in 1:p) {
rocfit <- roc(tempoutcome ~ fit$posteriors[, i + 1])
auc <- rocfit$auc
n1 <- sum(outcome == 1)
n2 <- sum(outcome == 2)
Ustat <- auc * n1 * n2
pval <- min(1, 2 * (1 - pwilcox(Ustat, n1, n2)))
pvals[i] <- pval
aucs[i] <- auc
}
kspvals[j] <- ks.test(pvals, punif, alternative = "greater")[[2]]
}
mean(kspvals < dataks)
warnings()
