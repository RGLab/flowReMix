booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
names(booldata) <- tolower(names(booldata))
# Configurations --------------------
setting <- 1
configurations <- expand.grid(npost = c(10, 20, 40),
niter = c(20, 35, 50))
config <- configurations[setting, ]
npost <- config[[1]]
niter <- config[[2]]
# Analysis -------------
library(flowReMix)
control <- flowReMix_control(updateLag = round(iter / 2), nsamp = 50, initMHcoef = 2.5,
nPosteriors = npost, centerCovariance = FALSE,
maxDispersion = 1000, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 20, isingInit = -log(99),
ncores = ncores,
preAssignCoefs = c(1, 0.5, 0, seq(from = 0, to = 0.5, length.out = 15)),
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
iter
filenames <- as.list(dir(path = 'data analysis/results', pattern="HVTNclust8*"))
filename
filenames
filenames <- as.list(dir(path = 'data analysis/results', pattern="HVTNclust8_*"))
filenames
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))
filenames
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
post <- Reduce("+", post) / length(filenames)
fit$posteriors[, -1] <- post
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
rocResults <- rocTable(fit, outcome[, 2], direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
vaccine <- outcome[, 2] == 0
hiv <- infect[, 2]
hiv[vaccine == 0] <- NA
infectROC <- rocTable(fit, hiv, direction = ">", adjust = "BH",
sortAUC = FALSE)
infectROC[order(infectROC$auc, decreasing = TRUE), ]
filenames <- as.list(dir(path = 'data analysis/results', pattern="HVTNclust8_*"))
filenames
filenames <- as.list(dir(path = 'data analysis/results', pattern="HVTNclust8_*"))
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
}
post <- Reduce("+", post) / length(filenames)
fit$posteriors[, -1] <- post
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
rocResults <- rocTable(fit, outcome[, 2], direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
vaccine <- outcome[, 2] == 0
hiv <- infect[, 2]
hiv[vaccine == 0] <- NA
infectROC <- rocTable(fit, hiv, direction = ">", adjust = "BH",
sortAUC = FALSE)
infectROC[order(infectROC$auc, decreasing = TRUE), ]
isingThreshold <- .99
ising <- plot(fit, type = "graph", graph = "ising",
fill = rocResults$auc, normalize = FALSE, count = FALSE,
threshold = isingThreshold)
ising
library(cowplot)
plot(fit, type = "graph", graph = "ising",
fill = infectROC$auc, normalize = FALSE,
threshold = isingThreshold)
plot(fit, type = "graph", graph = "randomEffects",
fill = rocResults$auc, normalize = FALSE,
threshold = 0.99)
subsets <- names(fit$posteriors[, -1])
stim <- sapply(strsplit(subsets, "/"), function(x) x[1])
stimnames <- unique(stim)
stim <- lapply(stimnames, function(x) subsets[stim %in% x])
names(stim) <- stimnames
stimpvals <- numeric(length(stim))
for(i in 1:length(stim)) {
group <- stim[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
# stimpvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
stimpvals[i] <- wilcox.test(aggregate[hiv == 1], aggregate[hiv == 0], alternative = "less")$p.value
}
names(stim) <- paste(names(stim), "pvalue:", round(stimpvals, 4))
parent <- sapply(strsplit(subsets, "/"), function(x) x[2])
parentnames <- unique(parent)
parent <- lapply(parentnames, function(x) subsets[parent %in% x])
names(parent) <- parentnames
parentpvals <- numeric(length(parent))
for(i in 1:length(parent)) {
group <- parent[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
# parentpvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
parentpvals[i] <- wilcox.test(aggregate[hiv == 1], aggregate[hiv == 0], alternative = "less")$p.value
}
names(parent) <- paste(names(parent), "pvalue:", round(parentpvals, 4))
stimparent  <- sapply(strsplit(subsets, "/"), function(x) paste(x[1:2], collapse = "/"))
stimparentnames <-unique(stimparent)
stimparent <- lapply(stimparentnames, function(x) subsets[stimparent %in% x])
names(stimparent) <- stimparentnames
sppvals  <- numeric(length(stimparent))
for(i in 1:length(stimparent)) {
group <- stimparent[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
# sppvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
sppvals[i] <- wilcox.test(aggregate[hiv == 1], aggregate[hiv == 0], alternative = "less")$p.value
}
names(stimparent) <- paste(names(stimparent), "pvalue:", round(sppvals, 4))
infection <- hiv
infection[hiv == 0] <- "NON-INFECTED"
infection[hiv == 1] <- "INFECTED"
infection[is.na(hiv)] <- "PLACEBO"
infection <- factor(infection, levels = c("PLACEBO", "INFECTED", "NON-INFECTED"))
stimbox <- plot(fit, type = "boxplot", groups = stim,
weights = weightList, ncol = 2,
target = infection)
stimbox
parentbox <- plot(fit, type = "boxplot", groups = parent,
weights = weightList, ncol = 2,
target = infection)
parentbox
parentstimbox <- plot(fit, type = "boxplot", groups = stimparent,
weights = weightList, ncol = 3, target = infection)
parentstimbox
allbox <- plot(fit, type = "boxplot", groups = "all", target = hiv,
test = "logistic", weights = weightList, one_sided = TRUE)
allbox
infectROC[order(infectROC$auc, decreasing = TRUE), ]
level <- 0.99
nresponders <- apply(post, 2, function(x) cummean(sort(1 - x)))
fit$assignmentList
post <- list()
random <- list()
assign <-list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
random[[i]] <- fit$randomEffectSamp
assign[[i]] <- fit$assignmentList
}
assign <- do.call("c", assign)
assign
length(assign)
names(assign)
?substr
?strsplit
x <- names(assign[[1]])
strsplit(x, "%%%")[[1]][[1]]
x
names(assign)
names(assign)[1]
x <- names(assign)[1]
strsplit(x, "%%%")[[1]][[1]]
sapply(names(assign), function(x) strsplit(x, "%%%")[[1]][[1]])
names(assign) <- sapply(names(assign), function(x) strsplit(x, "%%%")[[1]][[1]])
names(assign)
post <- list()
random <- list()
assign <-list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
random[[i]] <- fit$randomEffectSamp
assign[[i]] <- fit$assignmentList
}
post <- Reduce("+", post) / length(filenames)
assign <- do.call("c", assign)
random <- do.call("c", random)
fit$data <- subsetDat
fit$posteriors[, -1] <- post
fit$randomEffectSamp <- random
fit$assignmentList <- assign
args(stabilityGraph)
filenames <- as.list(dir(path = 'data analysis/results', pattern="TBdat1_*"))
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))
filenames
library(flowReMix)
source('~/Dropbox (Gottardo Lab)/flowReMix/cluster/TBdat/tbStab.R', echo=TRUE)
getExpression <- function(str) {
first <- substr(str, 1, 7)
second <- substr(str, 8, nchar(str))
second <- strsplit(second, "")[[1]]
seperators <- c(0, which(second %in% c("-", "+")))
expressed <- list()
for(i in 2:length(seperators)) {
if(second[seperators[i]] == "+") {
expressed[[i]] <- paste(second[(seperators[(i - 1)] + 1) : seperators[i]], collapse = '')
}
}
expressed <- paste(unlist(expressed), collapse = '')
expressed <- paste(first, expressed, sep = '')
return(expressed)
}
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) max(y$prop[y$stim != 0]) > min(y$prop[y$stim == 0])))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
# Loading Data --------------------------------
# hvtn <- read.csv(file = "data/merged_505_stats.csv")
# names(hvtn) <- tolower(names(hvtn))
# hvtn <- subset(hvtn, !is.na(ptid))
# saveRDS(hvtn, file = "data/505_stats.rds")
# Getting Demographic data ------------------------
demo <- read.csv(file = "data/primary505.csv")
infect <- data.frame(ptid = demo$ptid, status = demo$HIVwk28preunbl)
infect <- subset(infect, infect$ptid %in% hvtn$ptid)
# Getting marginals -----------------------------
library(flowReMix)
hvtn <- readRDS(file = "data/505_stats.rds")
length(unique(hvtn$name))
length(unique(hvtn$ptid))
length(unique(hvtn$population))
unique(hvtn$population)
unique(hvtn$stim)
nchars <- nchar(as.character(unique(hvtn$population)))
#marginals <- unique(hvtn$population)[nchars < 26]
marginals <- unique(hvtn$population)[nchars == 26]
marginals <- subset(hvtn, population %in% marginals)
marginals <- subset(marginals, stim %in% c("negctrl", "VRC ENV A",
"VRC ENV B", "VRC ENV C",
"VRC GAG B", "VRC NEF B",
"VRC POL 1 B", "VRC POL 2 B"))
marginals <- subset(marginals, !(population %in% c("4+", "8+")))
marginals <- subset(marginals, !(population %in% c("8+/107a-154-IFNg-IL2-TNFa-", "4+/107a-154-IFNg-IL2-TNFa-")))
marginals$stim <- factor(as.character(marginals$stim))
marginals$population <- factor(as.character(marginals$population))
# Descriptives -------------------------------------
library(ggplot2)
marginals$prop <- marginals$count / marginals$parentcount
# ggplot(marginals) + geom_boxplot(aes(x = population, y = log(prop), col = stim))
require(dplyr)
negctrl <- subset(marginals, stim == "negctrl")
negctrl <- summarize(group_by(negctrl, ptid, population), negprop = mean(prop))
negctrl <- as.data.frame(negctrl)
marginals <- merge(marginals, negctrl, all.x = TRUE)
# ggplot(subset(marginals, stim != "negctrl" & parent == "4+")) +
#   geom_point(aes(x = log(negprop), y = log(prop)), size = 0.25) +
#   facet_grid(stim ~ population, scales = "free") +
#   theme_bw() +
#   geom_abline(intercept = 0, slope = 1)
# Setting up data for analysis ---------------------------
unique(marginals$stim)
gag <- subset(marginals, stim %in% c("VRC GAG B", "negctrl"))
gag$subset <- factor(paste("gag", gag$population, sep = "/"))
gag$stimGroup <- "gag"
pol <-subset(marginals, stim %in% c("negctrl", "VRC POL 1 B", "VRC POL 2 B"))
pol$subset <- factor(paste("pol", pol$population, sep = "/"))
pol$stimGroup <- "pol"
env <- subset(marginals, stim %in% c("negctrl", "VRC ENV C", "VRC ENV B", "VRC ENV A"))
env$subset <- factor(paste("env", env$population, sep = "/"))
env$stimGroup <- "env"
nef <- subset(marginals, stim %in% c("negctrl", "VRC NEF B"))
nef$subset <- factor(paste("nef", nef$population, sep = "/"))
nef$stimGroup <- "nef"
subsetDat <- rbind(gag, pol, env, nef)
subsetDat$stim <- as.character(subsetDat$stim)
subsetDat$stim[subsetDat$stim == "negctrl"] <- 0
subsetDat$stim <- factor(subsetDat$stim)
# Converting subset names ------------------
subsets <- as.character(unique(subsetDat$subset))
expressed <- sapply(subsets, getExpression)
map <- cbind(subsets, expressed)
subsetDat$subset <- as.character(subsetDat$subset)
for(i in 1:nrow(map)) {
subsetDat$subset[which(subsetDat$subset == map[i, 1])] <- map[i, 2]
}
subsetDat$subset <- factor(subsetDat$subset)
# Getting outcomes -------------------------------
treatmentdat <- read.csv(file = "data/rx_v2.csv")
names(treatmentdat) <- tolower(names(treatmentdat))
treatmentdat$ptid <- factor(gsub("-", "", (treatmentdat$ptid)))
treatmentdat <- subset(treatmentdat, ptid %in% unique(subsetDat$ptid))
# Finding problematic subsets?
keep <- by(subsetDat, list(subsetDat$subset), function(x) mean(x$count > 1) > 0.02)
keep <- names(keep[sapply(keep, function(x) x)])
#result$subsets[result$qvals < 0.1] %in% keep
subsetDat <- subset(subsetDat, subset %in% keep)
subsetDat$subset <- factor(as.character(subsetDat$subset))
# Fitting the model ------------------------------
library(flowReMix)
control <- flowReMix_control(updateLag = 12, nsamp = 100, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100, isingInit = -log(95),
initMethod = "robust")
subsetDat$batch <- factor(subsetDat$batch..)
subsetDat$stimGroup <- factor(subsetDat$stimGroup)
preAssign <- by(subsetDat, subsetDat$ptid, assign)
preAssign <- do.call("rbind", preAssign)
filenames <- as.list(dir(path = 'data analysis/results', pattern="HVTNclust8_*"))
filenames <- lapply(filenames, function(x) paste0('data analysis/results/', x))[-c(3, 4)]
post <- list()
random <- list()
assign <-list()
for(i in 1:length(filenames)) {
load(file = filenames[[i]])
post[[i]] <- fit$posteriors[, -1]
random[[i]] <- fit$randomEffectSamp
assign[[i]] <- fit$assignmentList
}
post <- Reduce("+", post) / length(filenames)
assign <- do.call("c", assign)
random <- do.call("c", random)
fit$data <- subsetDat
fit$posteriors[, -1] <- post
fit$randomEffectSamp <- random
fit$assignmentList <- assign
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
rocResults <- rocTable(fit, outcome[, 2], direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
vaccine <- outcome[, 2] == 0
hiv <- infect[, 2]
hiv[vaccine == 0] <- NA
infectROC <- rocTable(fit, hiv, direction = ">", adjust = "BH",
sortAUC = FALSE)
level <- 0.99
post <- fit$posteriors[, -1]
nresponders <- apply(post, 2, function(x) cummean(sort(1 - x)))
select <- nresponders[1, ] < level
infectROC[order(infectROC$auc, decreasing = TRUE), ]
isingThreshold <- .99
ising <- plot(fit, type = "graph", graph = "ising",
fill = rocResults$auc, normalize = FALSE, count = FALSE,
threshold = isingThreshold)
ising
?load
load(file = "hvtnAggreageStability1.Robj")
load(file = "data analysis/results/hvtnAggreageStability1.Robj")
stab <- stability
plot(stab, threshold = 0.5)
plot(stab, threshold = 0.5, outcome rocTable$auc)
plot(stab, threshold = 0.5, outcome = rocTable$auc)
plot(stab, threshold = 0.5, fill = rocTable$auc)
plot(stab, threshold = 0.5, fill = rocResults$auc)
plot(stab, threshold = 0.7, fill = rocResults$auc)
plot(stab, threshold = 0.75, fill = rocResults$auc)
plot(stab, threshold = 0.8, fill = rocResults$auc)
plot(stab, threshold = 0.95, fill = rocResults$auc)
plot(stab, threshold = 0.90, fill = rocResults$auc)
plot(stab, threshold = 0.85, fill = rocResults$auc)
stab
load(file = "data analysis/results/hvtnAggreageStability1.Robj")
stab <- stability
ising <- plot(stab, threshold = 0.85, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.95, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.91, fill = rocResults$auc)
ising <- plot(stab, threshold = 0.91, fill = rocResults$auc)
ising <- plot(stab, threshold = 0.91, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.92, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.93, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.925, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.926, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.928, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.928, fill = infectROC$auc)
ising
load(file = "data analysis/results/hvtnAggreageRandom1.Robj")
rand <- stability
load(file = "data analysis/results/hvtnAggreageRandom1.Robj")
rand <- stability
random <- plot(rand, threshold = 0.928, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.9, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.85, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.8, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.5, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.6, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.7, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.75, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.7, fill = rocResults$auc)
random
load(file = "data analysis/results/hvtnAggreageStability1.Robj")
stab <- stability
ising <- plot(stab, threshold = 0.928, fill = rocResults$auc)
ising <- plot(stab, threshold = 0.928, fill = infectROC$auc)
ising
load(file = "data analysis/results/hvtnAggreageStability1.Robj")
stab <- stability
ising <- plot(stab, threshold = 0.928, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.9, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.85, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.8, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.84, fill = rocResults$auc)
ising
ising <- plot(stab, threshold = 0.85, fill = rocResults$auc)
ising
random <- plot(rand, threshold = 0.85, fill = rocResults$auc)
random
random <- plot(rand, threshold = 0.7, fill = rocResults$auc)
random
treatmentdat
dim(subsetDat)
subsetDat <- merge(subsetDat, treatm)
subsetDat <- merge(subsetDat, treatmentdat)
dim(subsetDat)
fit$data <- subsetDat
treatmentdat[15]
infect
subsetDat <- merge(subsetDat, infect)
subsetDat$status
treatmentdat$status
treatmentdat$control
subsetDat$hiv <- subsetDat$status
subsetDat$hiv[subsetDat$control == 1] <- NA
fit$data <- subsetDat
rocResults <- rocTable(fit, control, direction = ">", adjust = "BH",
sortAUC = FALSE)
unique(subsetDat$control)
rocResults <- rocTable(fit, outcome[, 2], direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
rocResults <- rocTable(fit, "control", direction = ">", adjust = "BH",
sortAUC = FALSE)
control
rm(control)
rocResults <- rocTable(fit, control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- rocTable(fit, target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
?enquo
??enquo
library(dplyr)
?enqeuo
enquo
?enquo
install.packages("dplyr")
library(dplyr)
enquo
fit$data$control
rocResults <- rocTable(fit, target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
version(dplyr)
??dplyr
?dplyr
update.packages()
dplyr::enquo
enquo
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rlang
install.packages("rlang")
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
fit$data$control
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- summary(fit, type = "ROC",
target = hiv, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults <- summary(fit, type = "ROC",
target = control, direction = ">", adjust = "BH",
sortAUC = FALSE)
rm(list = ls())
