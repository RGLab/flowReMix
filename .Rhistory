tbdat$subset <- paste(tbdat$stimgroup, tbdat$subset, sep = "/")
nonzerocounts <- by(tbdat, tbdat$subset, function(x) mean(x$count > 0))
nonzerocounts <- data.frame(names(nonzerocounts), as.numeric(unlist(nonzerocounts)))
countkeep <- nonzerocounts[nonzerocounts[, 2] >= 0.05, 1]
popkeep <- "cd4"
stimkeep <- "MP"
tempdat <- subset(tbdat, (subset %in% countkeep) & (parent %in% popkeep) & (stimgroup %in% stimkeep))
tempdat$population
tempdat$subset
tempdat$stim
tempdat$stim <- factor(tempdat$stim, levels = c("ctrl", stimkeep))
tempdat$stim
tempdat$subset <- factor(tempdat$subset)
tempdat$subste
tempdat$subset
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
wide <- merge(subctrl, substim)
wide
tempdat$stim
subctrl
sbstim
substim
wide <- merge(subctrl, substim)
wide
?merge
subctrl
sbstim
substim
subctrl <- subset(tempdat, stim == "ctrl")[, -1]
substim <- subset(tempdat, stim != "ctrl")[, -1]
wide <- merge(subctrl, substim)
wide
subctrl
names(subctrl)
wide <- merge(subctrl, substim, by = c("ptid", "subset"))
wide
tempdat$prop <- tbdat$count / tbdat$parentcount + 1 / tbdat$parentcount
tempdat$prop <- tempdat$count / tempdat$parentcount + 1 / tempdat$parentcount
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
tempdat$prop <- tempdat$count / tempdat$parentcount + 1 / tempdat$parentcount
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
ggplot(wide) +
geom_point(aes(x = prop.x, y = prop.y, col = type.x))
tempdat$prop <- tempdat$count / tempdat$parentcount + 1 / tempdat$parentcount
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
wide <- merge(subctrl, substim, by = c("ptid", "subset"))
names(wide)
ggplot(wide) +
geom_point(aes(x = prop.x, y = prop.y, col = type.x))
ggplot(wide) +
geom_point(aes(x = prop.x, y = prop.y, col = type.x)) +
facet_wrap(~ subset, scales = "free") +
geom_abline(intercept = 0, slope = 1) +
theme_bw()
ggplot(wide) +
geom_point(aes(x = prop.x, y = prop.y, col = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw()
?pdf
pdf("figures/TBscat.pdf", width = 15, height = 15)
ggplot(wide) +
geom_point(aes(x = prop.x, y = prop.y, col = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw()
dev.off()
tempdat$stim
control <- flowReMix_control(updateLag = 4, nsamp = 100, initMHcoef = 1,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 50, isingInit = -log(95),
initMethod = "robust")
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 20,
parallel = TRUE,
verbose = TRUE, control = control)
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
fit$covariance
diag(fit$covear)
diag(fit$covariance)
cov2cor(fit$covariance)
fit$isingCov
which(fit$isingCov != 0)
which(fit$isingCov != 0, arr.ind = TRUE)
fit$posteriors
library(reshape2)
post <- melt(post, id = c("ptid"))
post
names(post)
post <- fit$posteriors
post <- melt(post, id = c("ptid"))
post <- fit$posteriors
names(post)
post <- melt(post, id = c("ptid"))
post
names(post) <- c("ptid", "subset", "posterior")
post <- merge(wide, post, by = c("ptid", "subset"))
post <- fit$posteriors
post <- melt(post, id = c("ptid"))
names(post) <- c("ptid", "subset", "posterior")
post <- merge(wide, post, by = c("ptid", "subset"))
pdf("figures/TBscatPost.pdf", width = 15, height = 15)
ggplot(post) +
geom_point(aes(x = prop.x, y = prop.y, col = posterior, shape = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw()
dev.off()
pdf("figures/TBscatPost.pdf", width = 15, height = 15)
ggplot(post) +
geom_point(aes(x = prop.x, y = prop.y, col = posterior, shape = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw() +
scale_colour_gradientn(colours = rainbow(4))
dev.off()
fit$coefficients
tempdat$prop <- tempdat$count / tempdat$parentcount #+ 1 / tempdat$parentcount
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
wide <- merge(subctrl, substim, by = c("ptid", "subset"))
pdf("figures/TBscat.pdf", width = 15, height = 15)
ggplot(wide) +
geom_point(aes(x = prop.x, y = prop.y, col = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw()
dev.off()
control <- flowReMix_control(updateLag = 4, nsamp = 100, initMHcoef = 1,
nPosteriors = 1, centerCovariance = FALSE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 50, isingInit = -log(95),
initMethod = "firth")
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "firth",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
control <- flowReMix_control(updateLag = 4, nsamp = 100, initMHcoef = 1,
nPosteriors = 1, centerCovariance = FALSE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 50, isingInit = -log(95),
initMethod = "firth")
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "firth",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "firth",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
control <- flowReMix_control(updateLag = 4, nsamp = 100, initMHcoef = 1,
nPosteriors = 1, centerCovariance = FALSE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 50, isingInit = -log(95),
initMethod = "firth")
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "firth",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "firth",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
library(flowReMix)
# Loading data -------------------------
tbdat <- readRDS("data/tb_rozot_booleans.RDS")
names(tbdat) <- tolower(names(tbdat))
tbdat$ptid <- sapply(strsplit(tbdat$samplename, "_"), function(x) x[[1]])
tbdat$count[is.na(tbdat$count)] <- 0
# Parsing Expressions ----------------
expressions <- unique(tbdat$pop)
newexp <- character(length(expressions))
for(i in 1:length(expressions)) {
e <- expressions[i]
e <- strsplit(e, "&")[[1]]
res <- c()
for(j in 1:length(e)) {
sube <- strsplit(e[j], "-")[[1]][1]
if(substr(sube, 1, 1) != "!"){
res <- c(res, sube)
}
}
newexp[i] <- paste(paste(res, collapse = "+"), "+", sep = "")
}
map <- cbind(expressions, newexp)
for(i in 1:nrow(map)) {
tbdat$population[tbdat$population == map[i, 1]] <- map[i, 2]
}
# Defining subsets ---------------------
tbdat$subset <- paste(tbdat$parent, tbdat$population, sep = "/")
tbdat <- subset(tbdat, stim != "EBV")
datlist <- list()
stims <- unique(tbdat$stim)
stims <- stims[stims != "UNS"]
for(i in 1:length(stims)) {
temp <- subset(tbdat, stim %in% c(stims[i], "UNS"))
temp$stim[temp$stim == "UNS"] <- "ctrl"
temp$stimgroup <- stims[i]
datlist[[i]] <- temp
}
tbdat <- do.call("rbind", datlist)
tbdat$subset <- paste(tbdat$stimgroup, tbdat$subset, sep = "/")
nonzerocounts <- by(tbdat, tbdat$subset, function(x) mean(x$count > 0))
nonzerocounts <- data.frame(names(nonzerocounts), as.numeric(unlist(nonzerocounts)))
# Choosing subset of data for analysis -----------------
countkeep <- nonzerocounts[nonzerocounts[, 2] >= 0.2, 1]
popkeep <- "cd4"
stimkeep <- "MP"
tempdat <- subset(tbdat, (subset %in% countkeep) & (parent %in% popkeep) & (stimgroup %in% stimkeep))
tempdat$stim <- factor(tempdat$stim, levels = c("ctrl", stimkeep))
tempdat$subset <- factor(tempdat$subset)
rm(tbdat)
tempdat$subset
control <- flowReMix_control(updateLag = 6, nsamp = 100, initMHcoef = 1,
nPosteriors = 1, centerCovariance = FALSE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 50, isingInit = -log(95),
initMethod = "firth")
fit <- flowReMix(cbind(count, parentcount - count) ~ stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = stim,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "firth",
iterations = 8,
parallel = TRUE,
verbose = TRUE, control = control)
# Scatter plots with posteriors ---------------
library(reshape2)
post <- fit$posteriors
post <- melt(post, id = c("ptid"))
names(post) <- c("ptid", "subset", "posterior")
post <- merge(wide, post, by = c("ptid", "subset"))
pdf("figures/TBscatPost.pdf", width = 15, height = 15)
ggplot(post) +
geom_point(aes(x = prop.x, y = prop.y, col = 1 - posterior, shape = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw() +
scale_colour_gradientn(colours = rainbow(4))
dev.off()
# Fitting ROC curves -----------------
post <- fit$posteriors
outcome <- by(tempdat, tempdat$ptid, function(x) unique(x$type))
outcome <- data.frame(ptid = names(outcome), outcome = as.character(outcome))
post <- merge(post, outcome)
outcome <- post[, ncol(post)]
post <- post[, -c(1, ncol(post))]
library(pROC)
aucs <- numeric(ncol(post))
for(i in 1:ncol(post)) {
aucs[i] <- roc(outcome ~ post[, i])$auc
}
coefs <- sapply(fit$coefficients, function(x) x[2])
keep <- coef > 0 & coef < 100
n0 <- sum(outcome == "TB")
n1 <- sum(outcome == "LTBI")
pvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)
p.adjust(pvals[keep], method = "BH")
# Graph -----------------
assignments <- fit$assignmentList
subsets <- names(fit$coefficients)
reps <- 50
modelList <- list()
nsubsets <- ncol(assignments[[1]])
countCovar <- matrix(0, nrow = nsubsets, ncol = nsubsets)
doParallel::registerDoParallel(cores = 2)
for(i in 1:reps) {
mat <- t(sapply(assignments, function(x) x[sample(1:nrow(x), 1), ]))
colnames(mat) <- subsets
keep <- apply(mat, 2, function(x) any(x != x[1]))
mat <- mat[, keep]
#system.time(model <- IsingFit::IsingFit(mat, AND = TRUE, plot = TRUE))
system.time(coefs <- raIsing(mat, AND = FALSE, gamma = 0, method = "sparse"))
#plot(model)
#countCovar[keep, keep] <- countCovar[keep, keep] + (model$weiadj != 0) * sign(model$weiadj)
countCovar[keep, keep] <- countCovar[keep, keep] + (coefs != 0) * sign(coefs)
print(i)
}
doParallel::stopImplicitCluster()
props <- countCovar / reps
diag(props) <- 0
#save(props, file = "Data Analysis/results/HVTN bool robust graph.Robj")
table(props) / 2
threshold <- 0.4
which(abs(props) > threshold, arr.ind = TRUE)
props[abs(props) <= threshold] <- 0
sum(props != 0) / 2
#load(file = "Data Analysis/results/HVTN bool robust graph.Robj")
require(GGally)
library(network)
library(sna)
net <- props
diag(net) <- 0
network <- net
colnames(net) <- subsets
rownames(net) <- subsets
keep <- apply(network, 1, function(x) any(abs(x) >= threshold))
network <- network[keep, keep]
net <- network(net)
subsets <- names(fit$posteriors)[-1]
nodes <- ggnet2(network, label = subsets[keep])$data
edges <- matrix(nrow = sum(network != 0)/2, ncol = 5)
p <- nrow(network)
row <- 1
for(j in 2:p) {
for(i in 1:(j-1)) {
if(network[i, j] != 0) {
edges[row, ] <- unlist(c(nodes[i, 6:7], nodes[j, 6:7], network[i, j]))
row <- row + 1
}
}
}
edges <- data.frame(edges)
names(edges) <- c("xstart", "ystart", "xend", "yend", "width")
aucs <- aucs
nodes$auc <- aucs[keep]
names(edges)[5] <- "Dependence"
lims <- max(abs(props))
library(ggplot2)
ggplot() +
scale_colour_gradient2(low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = abs(Dependence)),
size = 1) +
#scale_fill_gradient2(low = "white", high = "red", limits = c(0.7, 1)) +
scale_fill_gradientn(colours = rainbow(4), limits = c(0.5, 1))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 8, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
table(props) / 2
threshold <- 0.5
which(abs(props) > threshold, arr.ind = TRUE)
props[abs(props) <= threshold] <- 0
sum(props != 0) / 2
#load(file = "Data Analysis/results/HVTN bool robust graph.Robj")
require(GGally)
library(network)
library(sna)
net <- props
diag(net) <- 0
network <- net
colnames(net) <- subsets
rownames(net) <- subsets
keep <- apply(network, 1, function(x) any(abs(x) >= threshold))
network <- network[keep, keep]
net <- network(net)
subsets <- names(fit$posteriors)[-1]
nodes <- ggnet2(network, label = subsets[keep])$data
edges <- matrix(nrow = sum(network != 0)/2, ncol = 5)
p <- nrow(network)
row <- 1
for(j in 2:p) {
for(i in 1:(j-1)) {
if(network[i, j] != 0) {
edges[row, ] <- unlist(c(nodes[i, 6:7], nodes[j, 6:7], network[i, j]))
row <- row + 1
}
}
}
edges <- data.frame(edges)
names(edges) <- c("xstart", "ystart", "xend", "yend", "width")
aucs <- aucs
nodes$auc <- aucs[keep]
names(edges)[5] <- "Dependence"
lims <- max(abs(props))
library(ggplot2)
ggplot() +
scale_colour_gradient2(low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = abs(Dependence)),
size = 1) +
#scale_fill_gradient2(low = "white", high = "red", limits = c(0.7, 1)) +
scale_fill_gradientn(colours = rainbow(4), limits = c(0.5, 1))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 8, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
library(igraph)
network[network != 0] <- 1
graph <- graph.adjacency(network)
comp <- components(graph)
library(igraph)
network[network != 0] <- 1
graph <- graph.adjacency(network)
comp <- components(graph)
# ROCs for vaccination
n0 <- sum(vaccine == 1)
n1 <- sum(vaccine == 0)
par(mfrow = c(1, 2))
for(i in 1:sum(comp$csize >= 3)) {
group <- which(comp$csize > 3)[i]
group <- which(comp$membership == group)
group <- nodes$label[group]
cols <- which(names(fit$posteriors) %in% group)
score <- rowMeans(fit$posteriors[, cols])
rocfit <- roc(outcome ~ score)
auc <- rocfit$auc
pval <- pwilcox(auc * n0 * n1, n0, n1, lower.tail = FALSE)
plot(rocfit, main = paste("Size", length(group), "AUC", round(auc, 3)))
}
table(props)
fit$levelProbs
pdf("figures/TBscatPost.pdf", width = 15, height = 15)
ggplot(post) +
geom_point(aes(x = prop.x, y = prop.y, col = 1 - posterior, shape = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw() +
scale_colour_gradientn(colours = rainbow(4))
dev.off()
tempdat$prop <- tempdat$count / tempdat$parentcount #+ 1 / tempdat$parentcount
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
wide <- merge(subctrl, substim, by = c("ptid", "subset"))
post <- fit$posteriors
post <- melt(post, id = c("ptid"))
names(post) <- c("ptid", "subset", "posterior")
post <- merge(wide, post, by = c("ptid", "subset"))
pdf("figures/TBscatPost.pdf", width = 15, height = 15)
ggplot(post) +
geom_point(aes(x = prop.x, y = prop.y, col = 1 - posterior, shape = type.x)) +
facet_wrap(~ subset, scales = "free", nrow = floor(sqrt(length(unique(wide$subset))))) +
geom_abline(intercept = 0, slope = 1) +
theme_bw() +
scale_colour_gradientn(colours = rainbow(4))
dev.off()
library(flowReMix)
library(flowReMix)
?choose
choose(30, 14)
