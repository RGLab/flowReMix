load("data analysis/results/RV144clusterIsing7.Robj")
isingplot <- plot(stability, fill = rocResults$auc, threshold = 0.75)
isingplot
save_plot("figures/RV144isingplot.pdf", isingplot,
base_width = 9, base_height = 5)
box <- plot(fit, target = infect, type = "boxplot", groups = groups,
weights = weights)
save_plot("figures/RV144boxplotALLforBio.pdf", box)
load("data analysis/results/RV144clusterIsing7.Robj")
infect
box <- plot(fit, target = infect, type = "boxplot", groups = groups,
weights = weights)
save_plot("figures/RV144boxplotALLforBio.pdf", box)
box
save_plot("figures/RV144boxplotALLforBio.pdf", box,
base_width = 9, base_height = 5)
groups <- list()
groups[[1]] <- names(fit$posteriors)[-1]
names(groups) <- paste("p-value:", round(polylogpval, 4))
subsets <- colnames(fit$posteriors)[-1]
nfunctions <- sapply(subsets, function(x) length(strsplit(x, ",", fixed = TRUE)[[1]]))
weights <- list()
weights[[1]] <- nfunctions / choose(6, nfunctions)
names(weights) <- "Polyfunctionality"
box <- plot(fit, target = infect, type = "boxplot", groups = groups,
weights = weights)
save_plot("figures/RV144boxplotALLforBio.pdf", box,
base_width = 9, base_height = 5)
load(file = "data analysis/results/RV144cluster7.Robj")
subjects <- unique(preAssignment$ptid)
for(i in 1:length(subjects)) {
row <- which(fit$posteriors$ptid == subjects[i])
assign <- subset(preAssignment, ptid == subjects[i])
matching <- match(colnames(fit$posteriors[, -1]), assign[, 2])
index <- which(assign[matching, 3] == 0) + 1
fit$posteriors[row, index] <- fit$posteriors[row, index] / 100
}
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccination, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- rocTable(fit, vaccination, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infectResults <- rocTable(fit, infect, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
func <- rowSums(fit$posteriors[, -1])
funcAUC <- roc(infect ~ func)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(funcAUC * n0 * n1, n0, n1, lower.tail = FALSE)
nfunctions <- sapply(subsets, function(x) length(gregexpr(",", paste(",", x))[[1]]))
M <- 6
weights <- nfunctions / (choose(M, nfunctions))
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weights))
polyAUC <- roc(infect ~ poly)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(polyAUC * n0 * n1, n0, n1, lower.tail = FALSE)
roc(vaccination ~ func)$auc
roc(vaccination ~ poly)$auc
group <- c(24, 21, 15, 8)
score <- rowMeans(fit$posteriors[, group])
rocfit <- roc(infect ~ score)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
ids$groupscore <- score
ids$poly <- poly
ids$func <- func
vaccines <- subset(correlates, infect.y != "PLACEBO")
vaccines$PTID <- as.character(vaccines$PTID)
ids$ptid <- as.character(ids$ptid)
vaccines <- merge(vaccines, ids, all.x = TRUE, all.y = TRUE,
by.x = "PTID", by.y = "ptid")
vaccines <- subset(vaccines, vaccines$infect != "PLACEBO")
plot(vaccines$PFS, vaccines$poly)
lines(lowess(vaccines$PFS, vaccines$poly), col = "red", lwd = 2)
cor(vaccines$PFS, vaccines$poly)
getExpression <- function(str) {
first <- substr(str, 1, 7)
second <- substr(str, 8, nchar(str))
second <- strsplit(second, "")[[1]]
seperators <- c(0, which(second %in% c("-", "+")))
expressed <- list()
for(i in 2:length(seperators)) {
if(second[seperators[i]] == "+") {
expressed[[i]] <- paste(second[(seperators[(i - 1)] + 1) : seperators[i]], collapse = '')
}
}
expressed <- paste(unlist(expressed), collapse = '')
expressed <- paste(first, expressed, sep = '')
return(expressed)
}
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) max(y$prop[y$stim != 0]) > mean(y$prop[y$stim == 0])))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
# Loading Data --------------------------------
# hvtn <- read.csv(file = "data/merged_505_stats.csv")
# names(hvtn) <- tolower(names(hvtn))
# hvtn <- subset(hvtn, !is.na(ptid))
# saveRDS(hvtn, file = "data/505_stats.rds")
# Getting Demographic data ------------------------
demo <- read.csv(file = "data/primary505.csv")
infect <- data.frame(ptid = demo$ptid, status = demo$HIVwk28preunbl)
infect <- subset(infect, infect$ptid %in% hvtn$ptid)
# Getting marginals -----------------------------
library(flowReMix)
hvtn <- readRDS(file = "data/505_stats.rds")
length(unique(hvtn$name))
length(unique(hvtn$ptid))
length(unique(hvtn$population))
unique(hvtn$population)
unique(hvtn$stim)
nchars <- nchar(as.character(unique(hvtn$population)))
#marginals <- unique(hvtn$population)[nchars < 26]
marginals <- unique(hvtn$population)[nchars == 26]
marginals <- subset(hvtn, population %in% marginals)
marginals <- subset(marginals, stim %in% c("negctrl", "VRC ENV A",
"VRC ENV B", "VRC ENV C",
"VRC GAG B", "VRC NEF B",
"VRC POL 1 B", "VRC POL 2 B"))
marginals <- subset(marginals, !(population %in% c("4+", "8+")))
marginals <- subset(marginals, !(population %in% c("8+/107a-154-IFNg-IL2-TNFa-", "4+/107a-154-IFNg-IL2-TNFa-")))
marginals$stim <- factor(as.character(marginals$stim))
marginals$population <- factor(as.character(marginals$population))
# Descriptives -------------------------------------
library(ggplot2)
marginals$prop <- marginals$count / marginals$parentcount
# ggplot(marginals) + geom_boxplot(aes(x = population, y = log(prop), col = stim))
require(dplyr)
negctrl <- subset(marginals, stim == "negctrl")
negctrl <- summarize(group_by(negctrl, ptid, population), negprop = mean(prop))
negctrl <- as.data.frame(negctrl)
marginals <- merge(marginals, negctrl, all.x = TRUE)
# ggplot(subset(marginals, stim != "negctrl" & parent == "4+")) +
#   geom_point(aes(x = log(negprop), y = log(prop)), size = 0.25) +
#   facet_grid(stim ~ population, scales = "free") +
#   theme_bw() +
#   geom_abline(intercept = 0, slope = 1)
# Setting up data for analysis ---------------------------
unique(marginals$stim)
gag <- subset(marginals, stim %in% c("VRC GAG B", "negctrl"))
gag$subset <- factor(paste("gag", gag$population, sep = "/"))
gag$stimGroup <- "gag"
pol <-subset(marginals, stim %in% c("negctrl", "VRC POL 1 B", "VRC POL 2 B"))
pol$subset <- factor(paste("pol", pol$population, sep = "/"))
pol$stimGroup <- "pol"
env <- subset(marginals, stim %in% c("negctrl", "VRC ENV C", "VRC ENV B", "VRC ENV A"))
env$subset <- factor(paste("env", env$population, sep = "/"))
env$stimGroup <- "env"
nef <- subset(marginals, stim %in% c("negctrl", "VRC NEF B"))
nef$subset <- factor(paste("nef", nef$population, sep = "/"))
nef$stimGroup <- "nef"
subsetDat <- rbind(gag, pol, env, nef)
subsetDat$stim <- as.character(subsetDat$stim)
subsetDat$stim[subsetDat$stim == "negctrl"] <- 0
subsetDat$stim <- factor(subsetDat$stim)
# Converting subset names ------------------
subsets <- as.character(unique(subsetDat$subset))
expressed <- sapply(subsets, getExpression)
map <- cbind(subsets, expressed)
subsetDat$subset <- as.character(subsetDat$subset)
for(i in 1:nrow(map)) {
subsetDat$subset[which(subsetDat$subset == map[i, 1])] <- map[i, 2]
}
subsetDat$subset <- factor(subsetDat$subset)
# Getting outcomes -------------------------------
treatmentdat <- read.csv(file = "data/rx_v2.csv")
names(treatmentdat) <- tolower(names(treatmentdat))
treatmentdat$ptid <- factor(gsub("-", "", (treatmentdat$ptid)))
treatmentdat <- subset(treatmentdat, ptid %in% unique(subsetDat$ptid))
# Finding problematic subsets?
keep <- by(subsetDat, list(subsetDat$subset), function(x) mean(x$count > 1) > 0.02)
keep <- names(keep[sapply(keep, function(x) x)])
#result$subsets[result$qvals < 0.1] %in% keep
subsetDat <- subset(subsetDat, subset %in% keep)
subsetDat$subset <- factor(as.character(subsetDat$subset))
# Fitting the model ------------------------------
library(flowReMix)
control <- flowReMix_control(updateLag = 12, nsamp = 100, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100, isingInit = -log(95),
initMethod = "robust")
subsetDat$batch <- factor(subsetDat$batch..)
subsetDat$stimGroup <- factor(subsetDat$stimGroup)
preAssign <- by(subsetDat, subsetDat$ptid, assign)
preAssign <- do.call("rbind", preAssign)
load(file = "Data Analysis/results/HVTN bool robust.Robj")
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
rocResults <- rocTable(fit, outcome[, 2], direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
vaccine <- outcome[, 2] == 0
hiv <- infect[, 2]
hiv[vaccine == 0] <- NA
infectROC <- rocTable(fit, hiv, direction = ">", adjust = "BH",
sortAUC = FALSE)
infectROC[order(infectROC$auc, decreasing = TRUE), ]
scatter <- plot(fit, target = vaccine, type = "scatter", ncol = 11)
vaccination <- outcome[, 2] == 0
fdrplot <- plot(fit, target = vaccination, type = "FDR")
nfunctions <- sapply(strsplit(colnames(fit$posteriors)[-1], "+", fixed = TRUE), function(x) length(x) - 1)
weightList <- list()
weightList$Polyfunctionality <- weights <- nfunctions / choose(5, nfunctions)
subsets <- names(fit$posteriors[, -1])
stim <- sapply(strsplit(subsets, "/"), function(x) x[1])
stimnames <- unique(stim)
stim <- lapply(stimnames, function(x) subsets[stim %in% x])
names(stim) <- stimnames
stimpvals <- numeric(length(stim))
for(i in 1:length(stim)) {
group <- stim[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
stimpvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
}
names(stim) <- paste(names(stim), "pvalue:", round(stimpvals, 4))
pval
names(sitm)
names(stim)
parent <- sapply(strsplit(subsets, "/"), function(x) x[2])
parentnames <- unique(parent)
parent <- lapply(parentnames, function(x) subsets[parent %in% x])
names(parent) <- parentnames
parentpvals <- numeric(length(parent))
for(i in 1:length(parent)) {
group <- parent[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
parentpvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
}
names(parent) <- paste(names(parent), "pvalue:", round(parentpvals, 4))
stimparent  <- sapply(strsplit(subsets, "/"), function(x) paste(x[1:2], collapse = "/"))
stimparentnames <-unique(stimparent)
stimparent <- lapply(stimparentnames, function(x) subsets[stimparent %in% x])
names(stimparent) <- stimparentnames
sppvals  <- numeric(length(stimparent))
for(i in 1:length(stimparent)) {
group <- stimparent[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
sppvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
}
names(stimparent) <- paste(names(stimparent), "pvalue:", round(sppvals, 4))
infection <- hiv
infection[hiv == 0] <- "NON-INFECTED"
infection[hiv == 1] <- "INFECTED"
infection <- factor(infection, levels = c("PLACEBO", "INFECTED", "NON-INFECTED"))
stimbox <- plot(fit, type = "boxplot", groups = stim,
weights = weightList, ncol = 2,
target = infection)
save_plot("figures/hvtnStimBox.pdf", stimbox,
base_width = 9, base_height = 6)
parentbox <- plot(fit, type = "boxplot", groups = parent,
weights = weightList, ncol = 2,
target = infection)
save_plot("figures/hvtnParentBox.pdf", parentbox,
base_width = 9, base_height = 5)
parentstimbox <- plot(fit, type = "boxplot", groups = stimparent,
weights = weightList, ncol = 3, target = infection)
save_plot("figures/hvtnParentStimBox.pdf", parentstimbox,
base_width = 10, base_height = 8)
all <- list()
all[[1]] <- names(fit$posteriors)[-1]
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weightList[[1]]))
allpval <- summary(glm(hiv ~ poly, family = "binomial"))$coefficients[2, 4] / 2
names(all) <- paste("All Subsets, p-value:", round(allpval, 4))
load("data analysis/results/HVTN bool robust graph3.Robj")
colnames(stability$network) <- colnames(fit$posteriors)[-1]
isingplot <- plot(stability, fill = rocResults$auc, threshold = 0.65)
isingplot
groups <- getGraphComponents(stability, threshold = 0.65, minsize = 4)
weightList$Polyfunctionality <- weights <- nfunctions / choose(5, nfunctions)
w <- weightList[[1]]
post <- fit$posteriors[, -1]
groups <- getGraphComponents(stability, threshold = 0.65, minsize = 4)
weightList$Polyfunctionality <- weights <- nfunctions / choose(5, nfunctions)
names(groups) <- c("107+", "Large CD4+", "env/8+")
pvals <- numeric(length(groups))
weights <- list()
weights[[1]] <- rep(1, ncol(fit$posteriors) - 1)
names(weights) <-  "Aggregate"
post <- fit$posteriors[, -1]
for(i in 1:length(groups)) {
group <- groups[[i]]
w <- weightList[[1]]
sub <- colnames(post) %in% group
score <- 1 - apply(post[, sub], 1, function(x) weighted.mean(x, w[sub]))
glmfit <- glm(hiv ~ score, family = "binomial")
pvals[i] <- summary(glmfit)$coefficients[2, 4] / 2
print(roc(hiv ~ score)$auc)
}
names(groups) <- paste(names(groups), "pvalue:", round(pvals, 4))
clusterbox <- plot(fit, type = "boxplot", target = infection, groups = groups, ncol = 3,
weights = weights)
save_plot("figures/HVTNisingBoxplotBio.pdf", clusterbox,
base_width = 8, base_height = 3)
require(cowplot)
save_plot("figures/HVTNisingBoxplotBio.pdf", clusterbox,
base_width = 8, base_height = 3)
load(file = "Data Analysis/results/HVTN bool robust.Robj")
#load(file = "Data Analysis/results/HVTNclust1.Robj")
# load(file = "Data Analysis/results/HVTNclust2.Robj")
fit$posteriors[, -1] <- 1 - fit$posteriors[, -1]
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
rocResults <- rocTable(fit, outcome[, 2], direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
vaccine <- outcome[, 2] == 0
hiv <- infect[, 2]
hiv[vaccine == 0] <- NA
infectROC <- rocTable(fit, hiv, direction = ">", adjust = "BH",
sortAUC = FALSE)
infectROC[order(infectROC$auc, decreasing = TRUE), ]
# Scatter plots -----------------------
scatter <- plot(fit, target = vaccine, type = "scatter", ncol = 11)
# save_plot("figures/HVTNscatter.pdf", scatter,
#           base_height = 20,
#           base_width = 22, limitsize = FALSE)
# FDR curves ----------------
vaccination <- outcome[, 2] == 0
fdrplot <- plot(fit, target = vaccination, type = "FDR")
# save_plot("figures/hvtnFDRplot.pdf", fdrplot,
#           base_height = 20,
#           base_width = 22, limitsize = FALSE)
# Posterior boxplots ------------------------
nfunctions <- sapply(strsplit(colnames(fit$posteriors)[-1], "+", fixed = TRUE), function(x) length(x) - 1)
weightList <- list()
weightList$Polyfunctionality <- weights <- nfunctions / choose(5, nfunctions)
# weightList$functionality <- rep(1, length(nfunctions))
subsets <- names(fit$posteriors[, -1])
stim <- sapply(strsplit(subsets, "/"), function(x) x[1])
stimnames <- unique(stim)
stim <- lapply(stimnames, function(x) subsets[stim %in% x])
names(stim) <- stimnames
stimpvals <- numeric(length(stim))
for(i in 1:length(stim)) {
group <- stim[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
stimpvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
}
names(stim) <- paste(names(stim), "pvalue:", round(stimpvals, 4))
parent <- sapply(strsplit(subsets, "/"), function(x) x[2])
parentnames <- unique(parent)
parent <- lapply(parentnames, function(x) subsets[parent %in% x])
names(parent) <- parentnames
parentpvals <- numeric(length(parent))
for(i in 1:length(parent)) {
group <- parent[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
parentpvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
}
names(parent) <- paste(names(parent), "pvalue:", round(parentpvals, 4))
stimparent  <- sapply(strsplit(subsets, "/"), function(x) paste(x[1:2], collapse = "/"))
stimparentnames <-unique(stimparent)
stimparent <- lapply(stimparentnames, function(x) subsets[stimparent %in% x])
names(stimparent) <- stimparentnames
sppvals  <- numeric(length(stimparent))
for(i in 1:length(stimparent)) {
group <- stimparent[[i]]
sub <- which(names(fit$posteriors)[-1] %in% group)
aggregate <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x[sub], weightList[[1]][sub]))
sppvals[i] <- summary(glm(hiv ~ aggregate, family = "binomial"))$coefficients[2, 4] / 2
}
names(stimparent) <- paste(names(stimparent), "pvalue:", round(sppvals, 4))
infection <- hiv
infection[hiv == 0] <- "NON-INFECTED"
infection[hiv == 1] <- "INFECTED"
# infection[is.na(hiv)] <- "PLACEBO"
infection <- factor(infection, levels = c("PLACEBO", "INFECTED", "NON-INFECTED"))
stimbox <- plot(fit, type = "boxplot", groups = stim,
weights = weightList, ncol = 2,
target = infection)
# save_plot("figures/hvtnStimBox.pdf", stimbox,
#           base_width = 9, base_height = 6)
parentbox <- plot(fit, type = "boxplot", groups = parent,
weights = weightList, ncol = 2,
target = infection)
# save_plot("figures/hvtnParentBox.pdf", parentbox,
#           base_width = 9, base_height = 5)
parentstimbox <- plot(fit, type = "boxplot", groups = stimparent,
weights = weightList, ncol = 3, target = infection)
# save_plot("figures/hvtnParentStimBox.pdf", parentstimbox,
#           base_width = 10, base_height = 8)
all <- list()
all[[1]] <- names(fit$posteriors)[-1]
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weightList[[1]]))
allpval <- summary(glm(hiv ~ poly, family = "binomial"))$coefficients[2, 4] / 2
names(all) <- paste("All Subsets, p-value:", round(allpval, 4))
allboxplot <- plot(fit, target = infection, type = "boxplot", groups = all)
save_plot("figures/HVTNallboxplot.pdf", allboxplot)
# Stability selection for graphical model ------------------------
# load("data analysis/results/HVTNising2.Robj")
# stability <- stabilityGraph(fit, type = "ising", reps = 100, cpus = 2)
# save(stability, file = "data analysis/results/HVTN bool robust graph3.Robj")
load("data analysis/results/HVTN bool robust graph3.Robj")
colnames(stability$network) <- colnames(fit$posteriors)[-1]
isingplot <- plot(stability, fill = rocResults$auc, threshold = 0.65)
isingplot
# save_plot("figures/HVTNising2.pdf", isingplot,
#           base_width = 9, base_height = 5)
load("data analysis/results/HVTNrand2.Robj")
randplot <- plot(randStability, fill = rocResults$auc,
threshold = 0.9)
randplot
# save_plot("figures/HVTNrand2.pdf", isingplot,
#           base_width = 7, base_height = 5)
# Boxplots for graph clusters -----------
groups <- getGraphComponents(stability, threshold = 0.65, minsize = 4)
weightList$Polyfunctionality <- weights <- nfunctions / choose(5, nfunctions)
names(groups) <- c("107+", "Large CD4+", "env/8+")
pvals <- numeric(length(groups))
weights <- list()
weights[[1]] <- rep(1, ncol(fit$posteriors) - 1)
names(weights) <-  "Aggregate"
post <- fit$posteriors[, -1]
for(i in 1:length(groups)) {
group <- groups[[i]]
w <- weightList[[1]]
sub <- colnames(post) %in% group
score <- 1 - apply(post[, sub], 1, function(x) weighted.mean(x, w[sub]))
glmfit <- glm(hiv ~ score, family = "binomial")
pvals[i] <- summary(glmfit)$coefficients[2, 4] / 2
print(roc(hiv ~ score)$auc)
}
names(groups) <- paste(names(groups), "pvalue:", round(pvals, 4))
clusterbox <- plot(fit, type = "boxplot", target = infection, groups = groups, ncol = 3,
weights = weights)
save_plot("figures/HVTNisingBoxplotBio.pdf", clusterbox,
base_width = 8, base_height = 3)
geomean <- function(x) exp(mean(log(x)))
library(flowReMix)
tbdat <- readRDS("data/tb_rozot_booleans.RDS")
names(tbdat) <- tolower(names(tbdat))
tbdat$ptid <- sapply(strsplit(tbdat$samplename, "_"), function(x) x[[1]])
tbdat$count[is.na(tbdat$count)] <- 0
expressions <- unique(tbdat$pop)
newexp <- character(length(expressions))
for(i in 1:length(expressions)) {
e <- expressions[i]
e <- strsplit(e, "&")[[1]]
res <- c()
for(j in 1:length(e)) {
sube <- strsplit(e[j], "-")[[1]][1]
if(substr(sube, 1, 1) != "!"){
res <- c(res, sube)
}
}
newexp[i] <- paste(paste(res, collapse = "+"), "+", sep = "")
}
map <- cbind(expressions, newexp)
for(i in 1:nrow(map)) {
tbdat$population[tbdat$population == map[i, 1]] <- map[i, 2]
}
tbdat$subset <- paste(tbdat$parent, tbdat$population, sep = "/")
tbdat <- subset(tbdat, stim != "EBV")
tbdat$stim[tbdat$stim == "UNS"] <- "ctrl"
tbdat$stim <- factor(tbdat$stim, levels = c("ctrl", "MP", "Mtbaux", "P1", "P2", "P3"))
nonzerocounts <- by(tbdat, tbdat$subset, function(x) mean(x$count > 0))
nonzerocounts <- data.frame(names(nonzerocounts), as.numeric(unlist(nonzerocounts)))
countkeep <- nonzerocounts[nonzerocounts[, 2] >= 0.2, 1]
popkeep <- c("cd4", "MAIT", "NKrainbow", "DCs", "Bcells", "conCD*")
stimkeep <- c("P", "MP", "Mtbaux")
tempdat <- subset(tbdat, (subset %in% countkeep) & (parent %in% popkeep))
tempdat$subset <- factor(tempdat$subset)
rm(tbdat)
library(ggplot2)
tempdat$prop <- tempdat$count / tempdat$parentcount #+ 1 / tempdat$parentcount
subctrl <- subset(tempdat, stim == "ctrl")
substim <- subset(tempdat, stim != "ctrl")
wide <- merge(subctrl, substim, by = c("ptid", "subset"))
npost <- 8
control <- flowReMix_control(updateLag = 15, nsamp = 50, initMHcoef = 1,
nPosteriors = npost, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = round(40 / npost), isingInit = -log(99),
initMethod = "sparse")
load(file = "data analysis/results/TB cluster 2.Robj")
library(reshape2)
library(ggplot2)
post <- fit$posteriors
post <- melt(post, id = c("ptid"))
names(post) <- c("ptid", "subset", "posterior")
post <- merge(wide, post, by = c("ptid", "subset"))
library(flowReMix)
