group <- subsets[keep][which(comp$membership == group)]
cols <- which(names(fit$posteriors) %in% group)
score <- rowMeans(fit$posteriors[, cols])
rocfit <- roc(infect ~ score)
auc <- rocfit$auc
pval <- pwilcox(auc * n0 * n1, n0, n1, lower.tail = FALSE)
pvals <- c(pvals, pval)
plot(rocfit, main = paste("Size", length(group), "AUC", round(auc, 4), "pval", round(pval, 3)))
}
rocResults[order(rocResults$auc, decreasing = TRUE), ]
library(flowReMix)
# Malaria dataset ----------------------------
data(malaria)
names(malaria)
table(malaria$experiment)
unique(malaria$ptid)
unique(malaria$population)
populations <- unique(malaria$population)
parents <- unique(malaria$parent)
leaves <- populations[!(populations %in% parents) ]
malaria <- subset(malaria, population %in% leaves)
unique(malaria$stim)
malaria$stimgroup[malaria$stim %in% c("PfRBC", "uRBC")] <- "RBC"
malaria$stimgroup[!(malaria$stim %in% c("PfRBC", "uRBC"))] <- "SPZ"
malaria$stim[malaria$stim == "uRBC"] <- "control"
malaria$stim[malaria$stim != "control"] <- "stim"
malaria$stim <- factor(malaria$stim, levels = c("control", "stim"))
isCytokine <- substring(malaria$population, nchar(malaria$population)) == "+"
malaria <- subset(malaria, isCytokine)
malaria$subset <- paste(malaria$stimgroup, "/", malaria$population, sep = "")
malaria$visitno <- factor(malaria$visitno)
malaria$infection <- TRUE
malaria$infection[malaria$ptid %in% c("60061", "50071", "20003")] <- FALSE
# Screening low counts -------------------
countlist <- by(malaria, malaria$subset, function(x) x$count)
toRemove <- sapply(countlist, function(x) mean(x > 4) < 0.05)
toRemove <- names(countlist)[toRemove]
malaria <- subset(malaria, !(subset %in% toRemove))
malaria$subset <- factor(malaria$subset)
malaria$ptid <- factor(malaria$ptid)
malaria <- malaria[order(malaria$ptid, malaria$stimgroup), ]
# Analysis -----------------------
library(flowReMix)
control <- flowReMix_control(updateLag = 15, keepEach = 5, nsamp = 30, initMHcoef = 2,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 500, minDispersion = 10^6,
randomAssignProb = 10^-8, intSampSize = 100,
lastSample = 40, isingInit = -log(89),
initMethod = "sparse")
tempdat <- subset(malaria, parent %in% c("4+", "8+", "4+/CXCR5+", "4+/CXCR5+/PD-1+",
"8+/CXCR5+"))
tempdat$time <- tempdat$visitno
tempdat$subset <- factor(as.character(tempdat$subs))
tempdat$stim[tempdat$stim]
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~
time/ptid + stim + visitno/stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = visitno,
data = tempdat,
covariance = "sparse",
ising_model = "sparse",
regression_method = "betabinom",
iterations = 25,
parallel = FALSE,
verbose = TRUE, control = control))
#save(fit, file = "data analysis/results/new malaria 4+ 4+CXCR5+ 8+ E.Robj")
# ROC analysis for infection -----------------
posteriors <- fit$posteriors
posteriors <- merge(posteriors, unique(malaria[, c(9, 14)]), all.x = TRUE)
infect <- posteriors[, ncol(posteriors)]
posteriors <- posteriors[, -c(1, ncol(posteriors))]
subsets <- colnames(posteriors)
aucs <- numeric(ncol(posteriors))
for(i in 1:ncol(posteriors)) {
post <- posteriors[, i]
rocfit <- roc(infect ~ post)
aucs[i] <- rocfit$auc
}
n0 <- sum(infect)
n1 <- length(infect) - n0
pvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)
qvals <- p.adjust(pvals, method = "BH")
rocResults <- data.frame(subset = subsets, auc = aucs,
prob = fit$levelProbs,
pval = pvals, qval = qvals)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
# Stability selection for graphical model --------------
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
reps <- 50
modelList <- list()
nsubsets <- ncol(assignments[[1]])
countCovar <- matrix(0, nrow = nsubsets, ncol = nsubsets)
for(i in 1:reps) {
mat <- t(sapply(assignments, function(x) x[sample(1:nrow(x), 1), ]))
colnames(mat) <- subsets
keep <- apply(mat, 2, function(x) any(x != x[1]))
mat <- mat[, keep]
system.time(model <- IsingFit::IsingFit(mat, AND = FALSE, plot = FALSE,
gamma = 0))
#coefs <- raIsing(mat, AND = TRUE, gamma = 0.9, method = "sparse")
#plot(model)
countCovar[keep, keep] <- countCovar[keep, keep] + (model$weiadj != 0) * sign(model$weiadj)
#countCovar[keep, keep] <- countCovar[keep, keep] + (coefs != 0) * sign(coefs)
print(i)
}
threshold <- 0.5
props <- countCovar / reps
#save(props, file = "data analysis/results/new malaria graph 4+ only.Robj")
table(props) / 2
which(props > threshold, arr.ind = TRUE)
props[props <= threshold] <- 0
sum(props != 0) / 2
# Plotting graph ---------------------
require(GGally)
library(network)
library(sna)
#threshold <- 0.4
network <- props
colnames(props) <- subsets
rownames(props) <- subsets
diag(network) <- 0
# network <- fit$isingCov
# diag(network) <- 0
# threshold <- quantile(abs(network)[abs(network) > 0], 0.9)
keep <- apply(network, 1, function(x) any(abs(x) > threshold))
#keep <-  (result$qvals <= 0.05)
network <- network[keep, keep]
net <- network(props)
subsets <- names(fit$posteriors)[-1]
nodes <- ggnet2(network, label = subsets[keep])$data
edges <- matrix(nrow = sum(network != 0)/2, ncol = 5)
p <- nrow(network)
row <- 1
for(j in 2:p) {
for(i in 1:(j-1)) {
if(network[i, j] != 0) {
edges[row, ] <- unlist(c(nodes[i, 6:7], nodes[j, 6:7], network[i, j]))
row <- row + 1
}
}
}
edges <- data.frame(edges)
names(edges) <- c("xstart", "ystart", "xend", "yend", "width")
aucs <- result$auc
nodes$auc <- rocResults$auc[keep]
nodes$qvals <- rocResults$qvals[keep]
names(edges)[5] <- "Dependence"
lims <- max(abs(props))
library(ggplot2)
ggplot() +
scale_colour_gradient2(limits=c(-lims, lims), low="dark red", high = "dark green") +
geom_segment(data = edges, aes(x = xstart, y = ystart,
xend = xend, yend = yend,
col = Dependence,
alpha = abs(Dependence)),
size = 1) +
#scale_fill_gradient2(low = "white", high = "red", limits = c(0.7, 1)) +
scale_fill_gradientn(colours = rainbow(4))+
geom_point(data = nodes, aes(x = x, y = y, fill = auc), shape = 21,
size = 8, col = "grey") +
scale_shape(solid = FALSE) +
geom_text(data = nodes, aes(x = x, y = y, label = nodes$label), size = 1.8) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
# Inference with connected components ----------------------
library(igraph)
network[network > 0.05] <- 1
network[network <= 0.05] <- 0
graph <- graph.adjacency(network)
comp <- components(graph)
# ROCs for vaccination
n0 <- sum(infect == 0)
n1 <- sum(infect == 1)
par(mfrow = c(2, 2))
pvals <- c()
for(i in 1:sum(comp$csize >= 2)) {
group <- which(comp$csize >= 2)[i]
group <- subsets[keep][which(comp$membership == group)]
cols <- which(names(fit$posteriors) %in% group)
score <- rowMeans(fit$posteriors[, cols])
rocfit <- roc(infect ~ score)
auc <- rocfit$auc
pval <- pwilcox(auc * n0 * n1, n0, n1, lower.tail = FALSE)
pvals <- c(pvals, pval)
plot(rocfit, main = paste("Size", length(group), "AUC", round(auc, 4), "pval", round(pval, 3)))
}
rocResults[order(rocResults$auc, decreasing = TRUE), ]
library(flowReMix)
# Malaria dataset ----------------------------
data(malaria)
names(malaria)
table(malaria$experiment)
unique(malaria$ptid)
unique(malaria$population)
populations <- unique(malaria$population)
parents <- unique(malaria$parent)
leaves <- populations[!(populations %in% parents) ]
malaria <- subset(malaria, population %in% leaves)
unique(malaria$stim)
malaria$stimgroup[malaria$stim %in% c("PfRBC", "uRBC")] <- "RBC"
malaria$stimgroup[!(malaria$stim %in% c("PfRBC", "uRBC"))] <- "SPZ"
malaria$stim[malaria$stim == "uRBC"] <- "control"
malaria$stim[malaria$stim != "control"] <- "stim"
malaria$stim <- factor(malaria$stim, levels = c("control", "stim"))
isCytokine <- substring(malaria$population, nchar(malaria$population)) == "+"
malaria <- subset(malaria, isCytokine)
malaria$subset <- paste(malaria$stimgroup, "/", malaria$population, sep = "")
malaria$visitno <- factor(malaria$visitno)
malaria$infection <- TRUE
malaria$infection[malaria$ptid %in% c("60061", "50071", "20003")] <- FALSE
# Screening low counts -------------------
countlist <- by(malaria, malaria$subset, function(x) x$count)
toRemove <- sapply(countlist, function(x) mean(x > 4) < 0.05)
toRemove <- names(countlist)[toRemove]
malaria <- subset(malaria, !(subset %in% toRemove))
malaria$subset <- factor(malaria$subset)
malaria$ptid <- factor(malaria$ptid)
malaria <- malaria[order(malaria$ptid, malaria$stimgroup), ]
# Analysis -----------------------
library(flowReMix)
control <- flowReMix_control(updateLag = 15, keepEach = 5, nsamp = 30, initMHcoef = 2,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 500, minDispersion = 10^6,
randomAssignProb = 10^-8, intSampSize = 100,
lastSample = 40, isingInit = -log(89),
initMethod = "sparse")
tempdat <- subset(malaria, parent %in% c("4+", "8+", "4+/CXCR5+", "4+/CXCR5+/PD-1+",
"8+/CXCR5+"))
tempdat$time <- tempdat$visitno
tempdat$subset <- factor(as.character(tempdat$subs))
tempdat$stim[tempdat$stim]
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~
time/ptid + stim + visitno/stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = visitno,
data = malaria,
covariance = "sparse",
ising_model = "sparse",
regression_method = "betabinom",
iterations = 25,
parallel = FALSE,
verbose = TRUE, control = control))
#save(fit, file = "data analysis/results/new malaria 4+ 4+CXCR5+ 8+ E.Robj")
# ROC analysis for infection -----------------
posteriors <- fit$posteriors
posteriors <- merge(posteriors, unique(malaria[, c(9, 14)]), all.x = TRUE)
infect <- posteriors[, ncol(posteriors)]
posteriors <- posteriors[, -c(1, ncol(posteriors))]
subsets <- colnames(posteriors)
aucs <- numeric(ncol(posteriors))
for(i in 1:ncol(posteriors)) {
post <- posteriors[, i]
rocfit <- roc(infect ~ post)
aucs[i] <- rocfit$auc
}
n0 <- sum(infect)
n1 <- length(infect) - n0
pvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)
qvals <- p.adjust(pvals, method = "BH")
rocResults <- data.frame(subset = subsets, auc = aucs,
prob = fit$levelProbs,
pval = pvals, qval = qvals)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
# Stability selection for graphical model --------------
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
reps <- 50
modelList <- list()
nsubsets <- ncol(assignments[[1]])
countCovar <- matrix(0, nrow = nsubsets, ncol = nsubsets)
for(i in 1:reps) {
mat <- t(sapply(assignments, function(x) x[sample(1:nrow(x), 1), ]))
colnames(mat) <- subsets
keep <- apply(mat, 2, function(x) any(x != x[1]))
mat <- mat[, keep]
system.time(model <- IsingFit::IsingFit(mat, AND = FALSE, plot = FALSE,
gamma = 0))
#coefs <- raIsing(mat, AND = TRUE, gamma = 0.9, method = "sparse")
#plot(model)
countCovar[keep, keep] <- countCovar[keep, keep] + (model$weiadj != 0) * sign(model$weiadj)
#countCovar[keep, keep] <- countCovar[keep, keep] + (coefs != 0) * sign(coefs)
print(i)
}
malaria$time <- malaria$visitno
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~
time/ptid + stim + visitno/stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = visitno,
data = malaria,
covariance = "sparse",
ising_model = "sparse",
regression_method = "betabinom",
iterations = 25,
parallel = FALSE,
verbose = TRUE, control = control))
getExpression <- function(str) {
first <- substr(str, 1, 7)
second <- substr(str, 8, nchar(str))
second <- strsplit(second, "")[[1]]
seperators <- c(0, which(second %in% c("-", "+")))
expressed <- list()
for(i in 2:length(seperators)) {
if(second[seperators[i]] == "+") {
expressed[[i]] <- paste(second[(seperators[(i - 1)] + 1) : seperators[i]], collapse = '')
}
}
expressed <- paste(unlist(expressed), collapse = '')
expressed <- paste(first, expressed, sep = '')
return(expressed)
}
# Loading Data --------------------------------
# hvtn <- read.csv(file = "data/merged_505_stats.csv")
# names(hvtn) <- tolower(names(hvtn))
# hvtn <- subset(hvtn, !is.na(ptid))
# saveRDS(hvtn, file = "data/505_stats.rds")
# Getting Demographic data ------------------------
demo <- read.csv(file = "data/primary505.csv")
infect <- data.frame(ptid = demo$ptid, status = demo$HIVwk28preunbl)
infect <- subset(infect, infect$ptid %in% hvtn$ptid)
# Getting marginals -----------------------------
library(flowReMix)
hvtn <- readRDS(file = "data/505_stats.rds")
length(unique(hvtn$name))
length(unique(hvtn$ptid))
length(unique(hvtn$population))
unique(hvtn$population)
unique(hvtn$stim)
nchars <- nchar(as.character(unique(hvtn$population)))
#marginals <- unique(hvtn$population)[nchars < 26]
marginals <- unique(hvtn$population)[nchars == 26]
marginals <- subset(hvtn, population %in% marginals)
marginals <- subset(marginals, stim %in% c("negctrl", "VRC ENV A",
"VRC ENV B", "VRC ENV C",
"VRC GAG B", "VRC NEF B",
"VRC POL 1 B", "VRC POL 2 B"))
marginals <- subset(marginals, !(population %in% c("4+", "8+")))
marginals <- subset(marginals, !(population %in% c("8+/107a-154-IFNg-IL2-TNFa-", "4+/107a-154-IFNg-IL2-TNFa-")))
marginals$stim <- factor(as.character(marginals$stim))
marginals$population <- factor(as.character(marginals$population))
# Descriptives -------------------------------------
library(ggplot2)
marginals$prop <- marginals$count / marginals$parentcount
# ggplot(marginals) + geom_boxplot(aes(x = population, y = log(prop), col = stim))
require(dplyr)
negctrl <- subset(marginals, stim == "negctrl")
negctrl <- summarize(group_by(negctrl, ptid, population), negprop = mean(prop))
negctrl <- as.data.frame(negctrl)
marginals <- merge(marginals, negctrl, all.x = TRUE)
# ggplot(subset(marginals, stim != "negctrl" & parent == "4+")) +
#   geom_point(aes(x = log(negprop), y = log(prop)), size = 0.25) +
#   facet_grid(stim ~ population, scales = "free") +
#   theme_bw() +
#   geom_abline(intercept = 0, slope = 1)
# Setting up data for analysis ---------------------------
unique(marginals$stim)
gag <- subset(marginals, stim %in% c("VRC GAG B", "negctrl"))
gag$subset <- factor(paste("gag", gag$population, sep = "/"))
gag$stimGroup <- "gag"
pol <-subset(marginals, stim %in% c("negctrl", "VRC POL 1 B", "VRC POL 2 B"))
pol$subset <- factor(paste("pol", pol$population, sep = "/"))
pol$stimGroup <- "pol"
env <- subset(marginals, stim %in% c("negctrl", "VRC ENV C", "VRC ENV B", "VRC ENV A"))
env$subset <- factor(paste("env", env$population, sep = "/"))
env$stimGroup <- "env"
nef <- subset(marginals, stim %in% c("negctrl", "VRC NEF B"))
nef$subset <- factor(paste("nef", nef$population, sep = "/"))
nef$stimGroup <- "nef"
subsetDat <- rbind(gag, pol, env, nef)
subsetDat$stim <- as.character(subsetDat$stim)
subsetDat$stim[subsetDat$stim == "negctrl"] <- 0
subsetDat$stim <- factor(subsetDat$stim)
# Converting subset names ------------------
subsets <- as.character(unique(subsetDat$subset))
expressed <- sapply(subsets, getExpression)
map <- cbind(subsets, expressed)
subsetDat$subset <- as.character(subsetDat$subset)
for(i in 1:nrow(map)) {
subsetDat$subset[which(subsetDat$subset == map[i, 1])] <- map[i, 2]
}
subsetDat$subset <- factor(subsetDat$subset)
# Getting outcomes -------------------------------
treatmentdat <- read.csv(file = "data/rx_v2.csv")
names(treatmentdat) <- tolower(names(treatmentdat))
treatmentdat$ptid <- factor(gsub("-", "", (treatmentdat$ptid)))
treatmentdat <- subset(treatmentdat, ptid %in% unique(subsetDat$ptid))
# Finding problematic subsets?
keep <- by(subsetDat, list(subsetDat$subset), function(x) mean(x$count > 1) > 0.02)
keep <- names(keep[sapply(keep, function(x) x)])
#result$subsets[result$qvals < 0.1] %in% keep
subsetDat <- subset(subsetDat, subset %in% keep)
subsetDat$subset <- factor(as.character(subsetDat$subset))
load(file = "Data Analysis/results/HVTN bool robust.Robj")
# ROC plots -----------------------------
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
posteriors <- fit$posteriors
posteriors <- merge(posteriors, outcome,
by.x = "ptid", by.y = "ptid",
all.x = TRUE)
isCMV <- substring(names(fit$posteriors), 1, 3) == "cmv"
posteriors <- posteriors[, !isCMV]
ctrlCol <- ncol(posteriors)
par(mfrow = c(4, 5), mar = rep(3, 4))
aucs <- numeric(ctrlCol - 2)
n1 <- sum(posteriors$control == 1)
n0 <- sum(posteriors$control == 0)
for(i in 2:(ctrlCol - 1)) {
post <- posteriors[, i]
outcome <- posteriors[, ctrlCol]
rocfit <- roc(outcome ~ post)
subset <- names(posteriors)[i]
auc <- rocfit$auc
#try(plot(rocfit, main = paste(subset, round(auc, 3))))
aucs[i - 1] <- auc
}
pvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)
qvals <- p.adjust(pvals, method = "bonferroni")
vaccineSelect <- qvals <= 0.05
subsets <- names(posteriors)[-c(1, ctrlCol)]
result <- data.frame(subsets, aucs, pvals, qvals)
result[order(result$aucs, decreasing = TRUE), ]
result$prob <- fit$levelProbs
result[order(result$aucs, decreasing = TRUE), ]
result[order(result$aucs, decreasing = TRUE), ]
outcome <- treatmentdat[, c(13, 15)]
vaccine <- outcome[, 2] == 0
hiv <- infect[vaccine, 2] == 1
aucs <- numeric(ctrlCol - 2)
ctrlCol <- ncol(posteriors)
n1 <- sum(hiv == 1)
n0 <- sum(hiv == 0)
for(i in 2:(ctrlCol -1)) {
post <- posteriors[vaccine, i]
rocfit <- roc(hiv ~ post)
subset <- names(posteriors)[i]
auc <- rocfit$auc
#try(plot(rocfit, main = paste(subset, round(auc, 3))))
aucs[i - 1] <- auc
}
infectPvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)#[vaccineSelect]
infectQvals <- p.adjust(infectPvals, method = "bonferroni")
subsets <- names(posteriors)[-c(1, ctrlCol)]#[vaccineSelect]
infectresult$prob <- fit$levelProbs
infectresult[order(infectresult$aucs, decreasing = TRUE), ]
infectresult$prob <- fit$levelProbs
load(file = "Data Analysis/results/HVTN bool robust.Robj")
# ROC plots -----------------------------
require(pROC)
outcome <- treatmentdat[, c(13, 15)]
posteriors <- fit$posteriors
posteriors <- merge(posteriors, outcome,
by.x = "ptid", by.y = "ptid",
all.x = TRUE)
isCMV <- substring(names(fit$posteriors), 1, 3) == "cmv"
posteriors <- posteriors[, !isCMV]
ctrlCol <- ncol(posteriors)
par(mfrow = c(4, 5), mar = rep(3, 4))
aucs <- numeric(ctrlCol - 2)
n1 <- sum(posteriors$control == 1)
n0 <- sum(posteriors$control == 0)
for(i in 2:(ctrlCol - 1)) {
post <- posteriors[, i]
outcome <- posteriors[, ctrlCol]
rocfit <- roc(outcome ~ post)
subset <- names(posteriors)[i]
auc <- rocfit$auc
#try(plot(rocfit, main = paste(subset, round(auc, 3))))
aucs[i - 1] <- auc
}
pvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)
qvals <- p.adjust(pvals, method = "bonferroni")
vaccineSelect <- qvals <= 0.05
subsets <- names(posteriors)[-c(1, ctrlCol)]
result <- data.frame(subsets, aucs, pvals, qvals)
result$prob <- fit$levelProbs
result[order(result$aucs, decreasing = TRUE), ]
# ROC analysis for infection ---------------------
outcome <- treatmentdat[, c(13, 15)]
vaccine <- outcome[, 2] == 0
hiv <- infect[vaccine, 2] == 1
aucs <- numeric(ctrlCol - 2)
ctrlCol <- ncol(posteriors)
n1 <- sum(hiv == 1)
n0 <- sum(hiv == 0)
for(i in 2:(ctrlCol -1)) {
post <- posteriors[vaccine, i]
rocfit <- roc(hiv ~ post)
subset <- names(posteriors)[i]
auc <- rocfit$auc
#try(plot(rocfit, main = paste(subset, round(auc, 3))))
aucs[i - 1] <- auc
}
infectPvals <- pwilcox(aucs * n0 * n1, n0, n1, lower.tail = FALSE)#[vaccineSelect]
infectQvals <- p.adjust(infectPvals, method = "bonferroni")
subsets <- names(posteriors)[-c(1, ctrlCol)]#[vaccineSelect]
infectresult <- data.frame(subsets, aucs, infectPvals, infectQvals)
infectresult$prob <- fit$levelProbs
infectresult[order(infectresult$aucs, decreasing = TRUE), ]
