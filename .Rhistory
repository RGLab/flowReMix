facet_wrap(~ subset, scales = 'free') +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4))
require(IsingSampler)
require(flowReMix)
load("results/binom model.Robj")
#load("results/dispersed model 2.Robj")
isingmat <- fit$isingCov
randomcov <- fit$covariance
overdispersion <- fit$dispersion
n <- 262
graph <- isingmat
diag(graph) <- 0
thresholds <- diag(isingmat)
assignment <- IsingSampler(n, graph, thresholds)
IsingFit::IsingFit(assignment, AND = FALSE)
rintercept <- mvtnorm::rmvnorm(n, sigma = randomcov)
coefs <- do.call("rbind", fit$coefficients)
batchEffect <- c(0, 0)
subjectlist <- list()
for(i in 1:n) {
row <- 0
subjectData <- data.frame(ptid = rep(i, nrow(coefs) * 2))
controlN <- sample(rv144$parentcount, 1)
treatmentN <- sample(rv144$parentcount, 1)
batch <- sample.int(length(batchEffect), 1)
subjectData$batch <- batch
for(j in 1:nrow(coefs)) {
row <- row + 1
subjectData$treatment[row] <- 0
subjectData$N[row] <- controlN
subjectData$eta[row] <- coefs[j, 1] + rintercept[i, j] + batchEffect[batch]
subjectData$subset[row] <- j
subjectData$M[row] <- overdispersion[j]
row <- row + 1
subjectData$treatment[row] <- 1
subjectData$N[row] <- treatmentN
subjectData$eta[row] <- subjectData$eta[row - 1] + coefs[j, 2] * assignment[i, j]
subjectData$subset[row] <- j
subjectData$M[row] <- overdispersion[j]
}
subjectData$prob <- expit(subjectData$eta)
subjectData$od <- with(subjectData, rbeta(nrow(subjectData), M * prob, M * (1 - prob)))
subjectData$count <- rbinom(nrow(coefs) * 2, subjectData$N, subjectData$od)
subjectlist[[i]] <- subjectData
}
simdata <- do.call("rbind", subjectlist)
simdata$batch <- factor(batch)
system.time(simfit <- subsetResponseMixtureRcpp(count ~  treatment,
sub.population = factor(simdata$subset),
N = N, id =  ptid, treatment = treatment,
data = simdata,
randomAssignProb = 0.0,
rate = 1, updateLag = 10, nsamp = 50, maxIter = 25,
sparseGraph = TRUE,
betaDiserpsion = FALSE,
initMHcoef = 3,
covarianceMethod = c("dense"),
centerCovariance = FALSE))
require(IsingSampler)
require(flowReMix)
load("results/binom model.Robj")
#load("results/dispersed model 2.Robj")
isingmat <- fit$isingCov
randomcov <- fit$covariance
overdispersion <- fit$dispersion
n <- 262
graph <- isingmat
diag(graph) <- 0
thresholds <- diag(isingmat)
assignment <- IsingSampler(n, graph, thresholds)
IsingFit::IsingFit(assignment, AND = FALSE)
rintercept <- mvtnorm::rmvnorm(n, sigma = randomcov)
coefs <- do.call("rbind", fit$coefficients)
batchEffect <- c(0, 0)
subjectlist <- list()
for(i in 1:n) {
row <- 0
subjectData <- data.frame(ptid = rep(i, nrow(coefs) * 2))
controlN <- sample(rv144$parentcount, 1)
treatmentN <- sample(rv144$parentcount, 1)
batch <- sample.int(length(batchEffect), 1)
subjectData$batch <- batch
for(j in 1:nrow(coefs)) {
row <- row + 1
subjectData$treatment[row] <- 0
subjectData$N[row] <- controlN
subjectData$eta[row] <- coefs[j, 1] + rintercept[i, j] + batchEffect[batch]
subjectData$subset[row] <- j
subjectData$M[row] <- overdispersion[j]
row <- row + 1
subjectData$treatment[row] <- 1
subjectData$N[row] <- treatmentN
subjectData$eta[row] <- subjectData$eta[row - 1] + coefs[j, 2] * assignment[i, j]
subjectData$subset[row] <- j
subjectData$M[row] <- overdispersion[j]
}
subjectData$prob <- expit(subjectData$eta)
subjectData$od <- with(subjectData, rbeta(nrow(subjectData), M * prob, M * (1 - prob)))
subjectData$count <- rbinom(nrow(coefs) * 2, subjectData$N, subjectData$od)
subjectlist[[i]] <- subjectData
}
simdata <- do.call("rbind", subjectlist)
simdata$batch <- factor(batch)
system.time(simfit <- subsetResponseMixtureRcpp(count ~  treatment,
sub.population = factor(simdata$subset),
N = N, id =  ptid, treatment = treatment,
data = simdata,
randomAssignProb = 0.0,
rate = 1, updateLag = 3, nsamp = 50, maxIter = 10,
sparseGraph = TRUE,
betaDiserpsion = FALSE,
initMHcoef = 3,
covarianceMethod = c("dense"),
centerCovariance = FALSE))
#save(simfit, file = "results/simfit dispersed")
#save(simfit, file = "results/simfit binomial.Robj")
require(pROC)
posteriors <- 1 - simfit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
rocfit <- roc(assignment[, i] ~ posteriors[, i])
print(plot(rocfit, main = paste(i, "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(3, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
post <- 1 - posteriors[, i]
vaccine <- assignment[, i]
treatment <- assignment[order(post), i]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red", main = leaves[selected_populations[i]]))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
posteriors <- 1 - simfit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
forplot <- list()
for(i in 1:length(selected_populations)) {
post <- 1 - posteriors[, i]
negprop <- log(simdata$count / simdata$N)[simdata$subset == i & simdata$treatment == 0]
envprop <- log(simdata$count / simdata$N)[simdata$subset == i & simdata$treatment == 1]
forplot[[i]] <- data.frame(subset = i,
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = assignment[, i])
}
forplot <- do.call("rbind", forplot)
require(ggplot2)
ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior,
shape = factor(vaccine))) +
facet_wrap(~ subset, scales = 'free') +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4))
load(file = "binom model.Robj")
require(pROC)
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
rocfit <- roc(vaccine ~ posteriors[, i])
print(plot(rocfit, main = paste(leaves[selected_populations[i]], "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red", main = leaves[selected_populations[i]]))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
forplot <- list()
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
negprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "negctrl"]
envprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "env"]
forplot[[i]] <- data.frame(subset = leaves[selected_populations[i]],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot)
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine)) +
facet_wrap(~ subset, scales = 'free') +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
forplot <- list()
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
negprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "negctrl"]
envprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "env"]
forplot[[i]] <- data.frame(subset = leaves[selected_populations[i]],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot)
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine)) +
facet_wrap(~ subset, scales = 'free') +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
load(file = "dispersed model 2.Robj")
require(pROC)
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
rocfit <- roc(vaccine ~ posteriors[, i])
print(plot(rocfit, main = paste(leaves[selected_populations[i]], "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red", main = leaves[selected_populations[i]]))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
forplot <- list()
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
negprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "negctrl"]
envprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "env"]
forplot[[i]] <- data.frame(subset = leaves[selected_populations[i]],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot)
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine)) +
facet_wrap(~ subset, scales = 'free') +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
load(file = "dispersed model 2.Robj")
load(file = "results/dispersed model 2.Robj")
require(pROC)
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
rocfit <- roc(vaccine ~ posteriors[, i])
print(plot(rocfit, main = paste(leaves[selected_populations[i]], "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(2, 3), mar = rep(3, 4))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red", main = leaves[selected_populations[i]]))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
forplot <- list()
vaccine <- as.vector(by(data, INDICES = data$ptid, FUN = function(x) x$vaccine[1] == "VACCINE"))
for(i in 1:length(selected_populations)) {
post <- posteriors[, i]
negprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "negctrl"]
envprop <- log(data$count / data$parentcount)[data$population == leaves[selected_populations[i]] & data$stim == "env"]
forplot[[i]] <- data.frame(subset = leaves[selected_populations[i]],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot)
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine)) +
facet_wrap(~ subset, scales = 'free') +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
require(reshape2)
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
forParentcount <- rv144
forParentcount <- as.data.frame(forParentcount)
forParentcount <- subset(forParentcount,
parent == "4+" & stim == "env")
forParentcount <- forParentcount[, c(2, 5, 11)]
forParentcount <- unique(forParentcount)
booldata <- merge(booldata, forParentcount, by.x = "PTID", by.y = "ptid",
all.x = TRUE, all.y = FALSE)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
vaccine <- as.numeric(by(booldata, booldata$PTID, function(x) x$vaccine[1] == "VACCINE"))
require(pROC)
system.time(fit <- subsetResponseMixtureRcpp(count ~  treatment,
sub.population = factor(booldata$Subset),
N = parentcount, id =  PTID,
data = booldata,
treatment = treatment,
randomAssignProb = 0,
weights = NULL,
rate = 1, updateLag = 10,
nsamp = 50, maxIter = 30,
MHinit = 3,
covarianceMethod = "sparse",
sparseGraph = TRUE,
centerCovariance = FALSE))
save(fit, file = "results/boolean dispersed fit.Robj")
subsets <- unique(booldata$Subset)
require(pROC)
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(i in 1:length(subsets)) {
try(rocfit <- roc(!vaccine ~ posteriors[, i]))
try(rocfit <- roc(vaccine ~ posteriors[, i]))
auc[i] <- rocfit$auc
print(plot(rocfit, main = paste(i, "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(4, 6), mar = rep(2, 4))
for(i in 1:length(subsets)) {
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red",
main = paste(i, "- AUC ", round(auc[i], 2))))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
forplot <- list()
for(i in 1:length(subsets)) {
post <- posteriors[, i]
negprop <- log(booldata$count / booldata$parentcount)[booldata$Subset == subsets[i] & booldata$stim == "nonstim"]
envprop <- log(booldata$count / booldata$parentcount)[booldata$Subset == subsets[i] & booldata$stim == "stim"]
forplot[[i]] <- data.frame(subset = subsets[i],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot[c(1:21, 23)])
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine == 1)) +
facet_wrap(~ subset, scales = 'free', ncol = 6) +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
library(gridExtra)
table <- data.frame(index = 1:length(subsets), subset = subsets,
responseProb = round(fit$levelProbs,2),
AUC = round(auc, 2))
pdf("figures/cell subset table B.pdf", height=8, width=6)
grid.table(table, rows = NULL)
dev.off()
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
require(reshape2)
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
forParentcount <- rv144
forParentcount <- as.data.frame(forParentcount)
forParentcount <- subset(forParentcount,
parent == "4+" & stim == "env")
forParentcount <- forParentcount[, c(2, 5, 11)]
forParentcount <- unique(forParentcount)
booldata <- merge(booldata, forParentcount, by.x = "PTID", by.y = "ptid",
all.x = TRUE, all.y = FALSE)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
vaccine <- as.numeric(by(booldata, booldata$PTID, function(x) x$vaccine[1] == "VACCINE"))
require(pROC)
system.time(fit <- subsetResponseMixtureRcpp(count ~  treatment,
sub.population = factor(booldata$Subset),
N = parentcount, id =  PTID,
data = booldata,
treatment = treatment,
randomAssignProb = 0,
weights = NULL,
rate = 1, updateLag = 10,
nsamp = 50, maxIter = 30,
initMHcoef = 3,
covarianceMethod = "sparse",
sparseGraph = TRUE,
centerCovariance = FALSE))
save(fit, file = "results/boolean dispersed fit.Robj")
subsets <- unique(booldata$Subset)
require(pROC)
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(i in 1:length(subsets)) {
try(rocfit <- roc(!vaccine ~ posteriors[, i]))
try(rocfit <- roc(vaccine ~ posteriors[, i]))
auc[i] <- rocfit$auc
print(plot(rocfit, main = paste(i, "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(4, 6), mar = rep(2, 4))
for(i in 1:length(subsets)) {
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red",
main = paste(i, "- AUC ", round(auc[i], 2))))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
forplot <- list()
for(i in 1:length(subsets)) {
post <- posteriors[, i]
negprop <- log(booldata$count / booldata$parentcount)[booldata$Subset == subsets[i] & booldata$stim == "nonstim"]
envprop <- log(booldata$count / booldata$parentcount)[booldata$Subset == subsets[i] & booldata$stim == "stim"]
forplot[[i]] <- data.frame(subset = subsets[i],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot[c(1:21, 23)])
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine == 1)) +
facet_wrap(~ subset, scales = 'free', ncol = 6) +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
library(gridExtra)
table <- data.frame(index = 1:length(subsets), subset = subsets,
responseProb = round(fit$levelProbs,2),
AUC = round(auc, 2))
pdf("figures/cell subset table B.pdf", height=8, width=6)
grid.table(table, rows = NULL)
dev.off()
require(pROC)
posteriors <- fit$posteriors[, 2:ncol(fit$posteriors), drop = FALSE]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(i in 1:length(subsets)) {
try(rocfit <- roc(!vaccine ~ posteriors[, i]))
try(rocfit <- roc(vaccine ~ posteriors[, i]))
auc[i] <- rocfit$auc
print(plot(rocfit, main = paste(i, "- AUC", round(rocfit$auc, 3))))
}
par(mfrow = c(4, 6), mar = rep(2, 4))
for(i in 1:length(subsets)) {
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red",
main = paste(i, "- AUC ", round(auc[i], 2))))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
forplot <- list()
for(i in 1:length(subsets)) {
post <- posteriors[, i]
negprop <- log(booldata$count / booldata$parentcount)[booldata$Subset == subsets[i] & booldata$stim == "nonstim"]
envprop <- log(booldata$count / booldata$parentcount)[booldata$Subset == subsets[i] & booldata$stim == "stim"]
forplot[[i]] <- data.frame(subset = subsets[i],
negprop = negprop, envprop = envprop,
posterior = 1 - post, vaccine = vaccine)
}
forplot <- do.call("rbind", forplot[c(1:21, 23)])
require(ggplot2)
print(ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine == 1)) +
facet_wrap(~ subset, scales = 'free', ncol = 6) +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4)))
library(gridExtra)
table <- data.frame(index = 1:length(subsets), subset = subsets,
responseProb = round(fit$levelProbs,2),
AUC = round(auc, 2))
pdf("figures/cell subset table B.pdf", height=8, width=6)
grid.table(table, rows = NULL)
dev.off()
