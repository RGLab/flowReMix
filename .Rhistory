iterations = 10, parallel = FALSE,
verbose = TRUE, control = control))
library(flowReMix)
library(flowReMix)
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
# Analysis -------------
library(flowReMix)
control <- flowReMix_control(updateLag = 3, nsamp = 50, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100,
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ treatment,
subject_id = ptid,
cell_type = subset,
cluster_variable = treatment,
data = booldata,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 6,
#cluster_assignment = preAssignment,
parallel = TRUE,
verbose = TRUE, control = control))
keep
library(flowReMix)
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
# Analysis -------------
library(flowReMix)
control <- flowReMix_control(updateLag = 3, nsamp = 50, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100,
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ treatment,
subject_id = ptid,
cell_type = subset,
cluster_variable = treatment,
data = booldata,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 6,
#cluster_assignment = preAssignment,
parallel = TRUE,
verbose = TRUE, control = control))
subsets <- unique(booldata$subset)
subsetIndex <- 1:length(subsets)
subsets <- unique(booldata$subset)[subsetIndex]
require(pROC)
posteriors <- fit$posteriors
posteriors <- posteriors[order(fit$posteriors$ptid), ]
vaccine <- vaccinemat
vaccine[, 1] <- factor(as.character(vaccine[, 1]), levels = levels(fit$posteriors$ptid))
vaccine <- vaccine[order(vaccine[, 1]), ]
vaccine <- vaccine[, 2]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(j in 1:length(subsets)) {
i <- which(names(posteriors) == subsets[j])
try(rocfit <- roc(!vaccine ~ posteriors[, i]))
auc[j] <- rocfit$auc
# try(print(plot(rocfit, main = paste(subsets[j], "- AUC", round(rocfit$auc, 3)),
#            cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.6)))
}
n1 <- sum(vaccine)
n2 <- sum(!vaccine)
wilcox <- auc * n1 * n2
pvals <- pwilcox(wilcox, n1, n2, lower.tail = FALSE)
rocResults <- data.frame(subsets, auc, pvals)
qvals <- p.adjust(pvals, method = "bonferroni")
rocResults$qvals <- qvals
rocResults[order(rocResults$pvals), ]
select <- rocResults$qvals < 0.05
require(pROC)
posteriors <- fit$posteriors[, -1, drop = FALSE]
posteriors <- subset(posteriors, infection != "PLACEBO")
subinfect <- infection[infection != "PLACEBO"]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(j in 1:length(subsets)) {
i <- which(names(posteriors) == subsets[j])
try(rocfit <- roc(subinfect ~ posteriors[, i]))
auc[i] <- rocfit$auc
# try(print(plot(rocfit, main = paste(subsets[j], "- AUC", round(rocfit$auc, 3)),
#                cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.6)))
}
n1 <- sum(subinfect == "INFECTED")
n2 <- length(subinfect) - n1
wilcox <- auc * n1 * n2
pvals <- pwilcox(wilcox, n1, n2, lower.tail = FALSE)
infectResult <- data.frame(subsets, auc, pvals)
infectResult <- subset(infectResult, select)
qvals <- p.adjust(infectResult$pvals, method = "BY")
infectResult$qvals <- qvals
infectResult[order(infectResult$pvals), ]
par(mfrow = c(1, 1), mar = rep(5, 5))
weights <- apply(posteriors, 2, var)
weights <- weights / sum(weights)
aggregate <- as.vector(as.matrix(posteriors) %*% weights)
aggregate <- apply(posteriors, 1, function(x) sum(log(x + 10^-4)))
rocfit <- roc(vaccine ~ aggregate)
plot(pROC::roc(vaccine ~ aggregate),
main = paste("AUC - Overall", round(rocfit$auc, 3)),
cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.6)
posteriors <- fit$posteriors
posteriors <- posteriors[order(fit$posteriors$ptid), ]
par(mfrow = c(4, 6), mar = rep(2, 4))
for(j in 1:length(subsets)) {
i <- which(names(posteriors) == subsets[j])
post <- posteriors[, i]
treatment <- vaccine[order(post)]
uniquePost <- sort(unique(post))
nominalFDR <- sapply(uniquePost, function(x) mean(post[post <= x]))
empFDR <- sapply(uniquePost, function(x) 1 - mean(vaccine[post <= x]))
power <- sapply(uniquePost, function(x) sum(vaccine[post <= x]) / sum(vaccine))
print(plot(nominalFDR, empFDR, type = "l", xlim = c(0, 1), ylim = c(0, 1), col = "red",
main = paste(subsets[j])))
lines(nominalFDR, power, col = "blue", lty = 2)
abline(a = 0, b = 1)
abline(v = c(0.05, 0.1), h = c(0.8, 0.9), col = "grey")
}
forplot <- list()
booldata <- booldata[order(as.character(booldata$ptid)), ]
fit$posteriors <- fit$posteriors[order(as.character(fit$posteriors$ptid)), ]
posteriors <- fit$posteriors[, -1, drop = FALSE]
logit <- function(x) log(x / (1 - x))
for(j in 1:length(subsets)) {
i <- which(names(posteriors) == subsets[j])
post <- 1 - posteriors[, i]
negprop <- logit(booldata$count / booldata$parentcount)[booldata$subset == subsets[j] & booldata$stim == "nonstim"]
envprop <- logit(booldata$count / booldata$parentcount)[booldata$subset == subsets[j] & booldata$stim == "stim"]
forplot[[j]] <- data.frame(subset = subsets[j],
negprop = negprop, envprop = envprop,
posterior = post, vaccine = vaccine,
ptid = fit$posteriors$ptid)
}
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
forplot <- do.call("rbind", forplot)
forplot <- merge(forplot, infectDat, all.x = TRUE, by.x = "ptid", by.y = "ptid")
require(ggplot2)
ggplot(forplot) +
geom_point(aes(x = negprop, y = envprop, col = posterior, shape = vaccine == 1)) +
facet_wrap(~ subset, scales = 'free', ncol = 6) +
geom_abline(slope = 1, intercept = 0) +
theme_bw() + scale_colour_gradientn(colours=rainbow(4))
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
# Analysis -------------
library(flowReMix)
control <- flowReMix_control(updateLag = 5, nsamp = 50, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100,
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ treatment,
subject_id = ptid,
cell_type = subset,
cluster_variable = treatment,
data = booldata,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 10,
#cluster_assignment = preAssignment,
parallel = TRUE,
verbose = TRUE, control = control))
save(fit, file = "data analysis/results/boolean robust3.Robj")
subsets <- unique(booldata$subset)
subsetIndex <- 1:length(subsets)
subsets <- unique(booldata$subset)[subsetIndex]
require(pROC)
posteriors <- fit$posteriors
posteriors <- posteriors[order(fit$posteriors$ptid), ]
vaccine <- vaccinemat
vaccine[, 1] <- factor(as.character(vaccine[, 1]), levels = levels(fit$posteriors$ptid))
vaccine <- vaccine[order(vaccine[, 1]), ]
vaccine <- vaccine[, 2]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(j in 1:length(subsets)) {
i <- which(names(posteriors) == subsets[j])
try(rocfit <- roc(!vaccine ~ posteriors[, i]))
auc[j] <- rocfit$auc
# try(print(plot(rocfit, main = paste(subsets[j], "- AUC", round(rocfit$auc, 3)),
#            cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.6)))
}
n1 <- sum(vaccine)
n2 <- sum(!vaccine)
wilcox <- auc * n1 * n2
pvals <- pwilcox(wilcox, n1, n2, lower.tail = FALSE)
rocResults <- data.frame(subsets, auc, pvals)
qvals <- p.adjust(pvals, method = "bonferroni")
rocResults$qvals <- qvals
rocResults[order(rocResults$pvals), ]
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
# Analysis -------------
library(flowReMix)
control <- flowReMix_control(updateLag = 10, nsamp = 100, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100,
initMethod = "robust")
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
system.time(fit <- flowReMix(cbind(count, parentcount - count) ~ treatment,
subject_id = ptid,
cell_type = subset,
cluster_variable = treatment,
data = booldata,
covariance = "sparse",
ising_model = "sparse",
regression_method = "robust",
iterations = 20,
#cluster_assignment = preAssignment,
parallel = TRUE,
verbose = TRUE, control = control))
save(fit, file = "data analysis/results/boolean robust3.Robj")
subsets <- unique(booldata$subset)
subsetIndex <- 1:length(subsets)
subsets <- unique(booldata$subset)[subsetIndex]
require(pROC)
posteriors <- fit$posteriors
posteriors <- posteriors[order(fit$posteriors$ptid), ]
vaccine <- vaccinemat
vaccine[, 1] <- factor(as.character(vaccine[, 1]), levels = levels(fit$posteriors$ptid))
vaccine <- vaccine[order(vaccine[, 1]), ]
vaccine <- vaccine[, 2]
par(mfrow = c(4, 6), mar = rep(1, 4))
auc <- numeric(length(subsets))
for(j in 1:length(subsets)) {
i <- which(names(posteriors) == subsets[j])
try(rocfit <- roc(!vaccine ~ posteriors[, i]))
auc[j] <- rocfit$auc
# try(print(plot(rocfit, main = paste(subsets[j], "- AUC", round(rocfit$auc, 3)),
#            cex.main = 0.8, cex.lab = 0.7, cex.axis = 0.6)))
}
n1 <- sum(vaccine)
n2 <- sum(!vaccine)
wilcox <- auc * n1 * n2
pvals <- pwilcox(wilcox, n1, n2, lower.tail = FALSE)
rocResults <- data.frame(subsets, auc, pvals)
qvals <- p.adjust(pvals, method = "bonferroni")
rocResults$qvals <- qvals
rocResults[order(rocResults$pvals), ]
doParallel::stopImplicitCluster()
library(flowReMix)
# Malaria dataset ----------------------------
data(malaria)
names(malaria)
table(malaria$experiment)
unique(malaria$ptid)
unique(malaria$population)
populations <- unique(malaria$population)
parents <- unique(malaria$parent)
leaves <- populations[!(populations %in% parents) ]
malaria <- subset(malaria, population %in% leaves)
unique(malaria$stim)
malaria$stimgroup[malaria$stim %in% c("PfRBC", "uRBC")] <- "RBC"
malaria$stimgroup[!(malaria$stim %in% c("PfRBC", "uRBC"))] <- "SPZ"
malaria$stim[malaria$stim == "uRBC"] <- "control"
malaria$stim <- factor(malaria$stim, levels = c("control", "PfSPZ", "PfRBC"))
isCytokine <- substring(malaria$population, nchar(malaria$population)) == "+"
malaria <- subset(malaria, isCytokine)
malaria$subset <- paste(malaria$stimgroup, "/", malaria$population, sep = "")
malaria$visitno <- factor(malaria$visitno)
malaria$infection <- TRUE
malaria$infection[malaria$ptid %in% c("60061", "50071", "20003")] <- FALSE
# Screening low counts -------------------
countlist <- by(malaria, malaria$subset, function(x) x$count)
toRemove <- sapply(countlist, function(x) mean(x > 4) < 0.05)
toRemove <- names(countlist)[toRemove]
malaria <- subset(malaria, !(subset %in% toRemove))
malaria$subset <- factor(malaria$subset)
# Analysis -----------------------
library(flowReMix)
control <- flowReMix_control(updateLag = 5, nsamp = 34, initMHcoef = 1,
nPosteriors = 3, centerCovariance = TRUE,
maxDispersion = 5000, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 100, isingInit = -log(89),
initMethod = "sparse")
tempdat <- subset(malaria, parent == "4+")
tempdat$subset <- factor(as.character(tempdat$subs))
fit <- flowReMix(cbind(count, parentcount - count) ~ visitno * stim,
subject_id = ptid,
cell_type = subset,
cluster_variable = visitno,
data = malaria,
covariance = "sparse",
ising_model = "sparse",
regression_method = "sparse",
iterations = 10,
parallel = FALSE,
verbose = TRUE, control = control)
