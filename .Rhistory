assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
subsets <- names(fit$coefficients)
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
screenPvals[j] <- mcScreenTest(counts, N)
print(screenPvals[j])
}
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
screenPvals[j] <- mcScreenTest(counts, N)
print(c(j, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 10)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- mean(ratio > ratios)
return(pval)
}
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
screenPvals[j] <- mcScreenTest(counts, N)
print(c(j, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 10)
print(M)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- mean(ratio > ratios)
return(pval)
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), -1)
print(M)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- mean(ratio > ratios)
return(pval)
}
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
screenPvals[j] <- mcScreenTest(counts, N)
print(c(j, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), -1)
print(M)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), -1)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 20)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 20)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 5)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
subsets <- names(fit$coefficients)
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 100)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 10)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
cbind(rocResults, screenPvals)
cbind(rocResults, screenPvals)
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 50)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
subsets <- names(fit$coefficients)
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
pvals <- pchisq(likratios, nSubjects - 1, lower.tail = FALSE)
cbind(rocResults, screenPvals)
which(p.adjust(pvals, method = "bonferroni")  > 0.01)
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 100)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
subsets <- names(fit$coefficients)
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
pvals <- pchisq(likratios, nSubjects - 1, lower.tail = FALSE)
cbind(rocResults, screenPvals)
which(p.adjust(pvals, method = "bonferroni")  > 0.01)
mcScreenTest <- function(y, N, reps = 1000) {
n <- length(y)
if(length(N) == 1) {
N <- rep(N, n)
} else {
if(length(N) != n) stop("wrong length for N!")
}
nullprop <- rep(mean(y / N), n)
M <- max(dispersionMLE(y, N, nullprop), 1000)
props <- y / N
nullprop <- rep(mean(props), n)
ratio <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, M))
ratios <- numeric(reps)
for(i in 1:reps) {
probs <- rbeta(n, nullprob * M, (1 - nullprob) * M)
y <- rbinom(n, N, probs)
props <- y/N
nullprop <- rep(mean(y / N), n)
estM <- dispersionMLE(y, N, nullprop)
ratios[i] <- sum(dbinom(y, N, props, TRUE)) - sum(vecBetaBinomDens(y, N, nullprop, estM))
}
pval <- 1- mean(ratio > ratios)
return(list(pval = pval, M = M))
}
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
subsets <- names(fit$coefficients)
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
pvals <- pchisq(likratios, nSubjects - 1, lower.tail = FALSE)
cbind(rocResults, screenPvals)
which(p.adjust(pvals, method = "bonferroni")  > 0.01)
assignments <- fit$assignmentList
names(assignments) <- substr(names(assignments), 1, 5)
assignments <- lapply(unique(names(assignments)), function(x) {
do.call("rbind", assignments[names(assignments) == x])
})
subsets <- names(fit$coefficients)
nSubsets <- length(fit$coefficients)
nSubjects <- length(fit$assignmentList)
screenPvals <- numeric(nSubsets)
M <- numeric(nSubsets)
for(j in 1:nSubsets) {
counts <- sapply(assignments, function(x) sum(x[, j]))
N <- sapply(assignments, function(x) length(x[, j]))
counts <- pmax(pmin(N - 1, counts), 1)
stest <- mcScreenTest(counts, N, 2000)
screenPvals[j] <- stest$pval
print(c(j, stest$M, screenPvals[j]))
}
pvals <- pchisq(likratios, nSubjects - 1, lower.tail = FALSE)
cbind(rocResults, screenPvals)
which(p.adjust(pvals, method = "bonferroni")  > 0.01)
