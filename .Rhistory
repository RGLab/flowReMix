# load(file = "data analysis/results/RV144cluster9weak.Robj")
# load(file = "data analysis/results/RV144cluster10.Robj")
load(file = "data analysis/results/RV144cluster11moreDisp.Robj")
# load(file = "data analysis/results/RV144cluster7.Robj")
# load(file = "data analysis/results/RV144cluster12LessDisp.Robj")
# load(file = "data analysis/results/boolean robust maxAssign 06 1.Robj")
# load(file = "data analysis/results/RV144cluster13gradAssign55.Robj")
# load(file = "data analysis/results/RV144cluster14gradAssign25.Robj")
# Adjusting posteriors post-hoc using pre-assignment rule --------------
subjects <- unique(preAssignment$ptid)
for(i in 1:length(subjects)) {
row <- which(fit$posteriors$ptid == subjects[i])
assign <- subset(preAssignment, ptid == subjects[i])
matching <- match(colnames(fit$posteriors[, -1]), assign[, 2])
index <- which(assign[matching, 3] == 0) + 1
fit$posteriors[row, index] <- fit$posteriors[row, index] / 100
}
plot(fit, type = "scatter")
# ROC for vaccinations -----------------------------
# sink("data analysis/results/RV144logisticSummary.txt")
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccination, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
# save_plot("figures/cowROCplot.pdf", rocplot,
#           base_height = 6,
#           base_width = 12)
rocResults <- rocTable(fit, vaccination, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
plot(fit, type = "graph", threshold = 0.93, fill = rocResults$auc)
# ROC for infection status -------------------
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infectResults <- rocTable(fit, infect, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
func <- rowSums(fit$posteriors[, -1])
funcAUC <- roc(infect ~ func)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(funcAUC * n0 * n1, n0, n1, lower.tail = FALSE)
nfunctions <- sapply(subsets, function(x) length(gregexpr(",", paste(",", x))[[1]]))
M <- 6
weights <- nfunctions / (choose(M, nfunctions))
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weights))
# poly <- apply(fit$posteriors[, -1], 1, function(x) median(weights * x))
polyAUC <- roc(infect ~ poly)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(polyAUC * n0 * n1, n0, n1, lower.tail = FALSE)
roc(vaccination ~ func)$auc
roc(vaccination ~ poly)$auc
group <- c(24, 21, 15, 8)
score <- rowMeans(fit$posteriors[, group])
rocfit <- roc(infect ~ score)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
ids$groupscore <- score
ids$poly <- poly
ids$func <- func
vaccines <- subset(correlates, infect.y != "PLACEBO")
vaccines$PTID <- as.character(vaccines$PTID)
ids$ptid <- as.character(ids$ptid)
vaccines <- merge(vaccines, ids, all.x = TRUE, all.y = TRUE,
by.x = "PTID", by.y = "ptid")
vaccines <- subset(vaccines, vaccines$infect != "PLACEBO")
plot(vaccines$PFS, vaccines$poly)
lines(lowess(vaccines$PFS, vaccines$poly), col = "red", lwd = 2)
cor(vaccines$PFS, vaccines$poly)
abline(v = c(0.05, .085))
abline(h = c(0.35))
target <- vaccines$poly > 0.35 & vaccines$PFS > 0.05 & vaccines$PFS < 0.085
assign <- function(x) {
x$prop <- x$count / x$parentcount
assign <- as.numeric(by(x, x$subset, function(y) y$prop[1] > y$prop[2]))
assign[assign == 1] <- -1
result <- data.frame(ptid = x$ptid[1], subset = unique(x$subset), assign = assign)
return(result)
}
require(pROC)
require(reshape2)
data("rv144_booleans")
bySubset <- by(data.frame(booleans$stim, booleans$nonstim), booleans$Subset, function(x) x)
largerThanThershold <- sapply(bySubset, function(x) colSums(x >5))
booldata <- melt(booleans, c("PTID", "Subset"))
names(booldata)[3:4] <- c("stim", "count")
booldata <- by(booldata, INDICES = list(booldata$PTID, booldata$stim), function(x) {
x$parentcount <- sum(x$count)
return(x)
})
booldata <- do.call("rbind", booldata)
booldata <- subset(booldata, Subset != "!TNFa&!IFNg&!IL4&!IL2&!CD154&!IL17a")
booldata$treatment <- as.numeric(booldata$stim == "stim")
uniquepop <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
booldata <- subset(booldata, !is.na(Subset))
allsubset <- booldata
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
# Naming ------------------
subsets <- unique(booldata$Subset)
booldata$Subset <- as.character(booldata$Subset)
nfunctions <- numeric(length(subsets))
for(i in 1:length(subsets)) {
split <- strsplit(as.character(subsets[i]), "&")[[1]]
first <- substr(split, 1, 1)
nfunction <- sum(first != "!")
nfunctions[i] <- nfunction
name <- paste(split[first != "!"], collapse = ",")
booldata$nfunction[booldata$Subset == subsets[[i]]] <- nfunction
booldata$Subset[booldata$Subset == subsets[[i]]] <- name
}
subsets <- unique(booldata$Subset)
booldata <- with(booldata, booldata[order(Subset, PTID, stim, decreasing = FALSE), ])
names(booldata) <- tolower(names(booldata))
# Getting vaccine information --------------------
data("rv144")
rv144 <- rv144[order(rv144$ptid), ]
vaccine <- (by(rv144, rv144$ptid, function(x) x$vaccine[1] == "VACCINE"))
vaccine <- data.frame(ptid = names(vaccine), vaccine = as.numeric(vaccine))
vaccinemat <- vaccine[vaccine$ptid %in% booldata$ptid, ]
# Getting infection status
data("rv144_correlates_data")
correlates <- rv144_correlates_data
correlates <- correlates[order(as.character(correlates$PTID)), ]
infection <- correlates$infect.y
# Converting low counts to booleans --------------
countByPop <- by(booldata, booldata$subset, function(x) max(x$count / x$parentcount) < 10^-3 / 2)
countByPop <- by(booldata, booldata$subset, function(x) {
if(max(x$count / x$parentcount) < 10^-3 / 2) {
x$count <- as.numeric(x$count > 0)
x$parentcount <- 1
}
return(x)
})
# booldata <- do.call("rbind", countByPop)
# Analysis -------------
library(flowReMix)
control <- flowReMix_control(updateLag = 15, nsamp = 100, initMHcoef = 2.5,
nPosteriors = 1, centerCovariance = TRUE,
maxDispersion = 10^3, minDispersion = 10^7,
randomAssignProb = 10^-8, intSampSize = 50,
lastSample = 20, isingInit = -log(99),
initMethod = "robust",
preAssignCoefs = c(0.95, 0.5, seq(from = 0, to = 0.5, length.out = 11)))
booldata$subset <- factor(booldata$subset)
preAssignment <- do.call("rbind", by(booldata, booldata$ptid, assign))
load(file = "data analysis/results/RV144cluster10.Robj")
subjects <- unique(preAssignment$ptid)
for(i in 1:length(subjects)) {
row <- which(fit$posteriors$ptid == subjects[i])
assign <- subset(preAssignment, ptid == subjects[i])
matching <- match(colnames(fit$posteriors[, -1]), assign[, 2])
index <- which(assign[matching, 3] == 0) + 1
fit$posteriors[row, index] <- fit$posteriors[row, index] / 100
}
plot(fit, type = "scatter")
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccination, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- rocTable(fit, vaccination, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
plot(fit, type = "graph", threshold = 0.93, fill = rocResults$auc)
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infectResults <- rocTable(fit, infect, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
func <- rowSums(fit$posteriors[, -1])
funcAUC <- roc(infect ~ func)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(funcAUC * n0 * n1, n0, n1, lower.tail = FALSE)
nfunctions <- sapply(subsets, function(x) length(gregexpr(",", paste(",", x))[[1]]))
M <- 6
weights <- nfunctions / (choose(M, nfunctions))
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weights))
polyAUC <- roc(infect ~ poly)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(polyAUC * n0 * n1, n0, n1, lower.tail = FALSE)
roc(vaccination ~ func)$auc
roc(vaccination ~ poly)$auc
group <- c(24, 21, 15, 8)
score <- rowMeans(fit$posteriors[, group])
rocfit <- roc(infect ~ score)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
ids$groupscore <- score
ids$poly <- poly
ids$func <- func
vaccines <- subset(correlates, infect.y != "PLACEBO")
vaccines$PTID <- as.character(vaccines$PTID)
ids$ptid <- as.character(ids$ptid)
vaccines <- merge(vaccines, ids, all.x = TRUE, all.y = TRUE,
by.x = "PTID", by.y = "ptid")
vaccines <- subset(vaccines, vaccines$infect != "PLACEBO")
plot(vaccines$PFS, vaccines$poly)
lines(lowess(vaccines$PFS, vaccines$poly), col = "red", lwd = 2)
cor(vaccines$PFS, vaccines$poly)
abline(v = c(0.05, .085))
abline(h = c(0.35))
target <- vaccines$poly > 0.35 & vaccines$PFS > 0.05 & vaccines$PFS < 0.085
summary(glm(infect ~ func + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
summary(glm(infect ~ poly + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
polylogpval <- summary(glm(infect ~ poly + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))$coefficients[2, 4] / 2
summary(glm(infect ~ groupscore + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
rocfit <- roc(vaccines$infect ~ vaccines$FS)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
rocfit <- roc(vaccines$infect ~ vaccines$PFS)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
vaccines <- subset(correlates, infect.y != "PLACEBO")
resultList <- list()
adjRocList <- list()
for(i in 1:(ncol(fit$posteriors) - 1)) {
vaccines$post <- NULL
post <- fit$posteriors[!is.na(infect), c(1, i + 1)]
names(post)[2] <- "post"
vaccines <- merge(vaccines, post, by.x = "PTID", by.y = "ptid", all.x = TRUE)
resultList[[i]] <- summary(glm(infect.y ~ post + IgAprim + agecat + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
resid <- lm(post ~ IgAprim + agecat + risk.medium + risk.high + sex,
data = vaccines)$residuals
infectResid <- glm(infect.y  ~ IgAprim + agecat + risk.medium + risk.high + sex,
family = "binomial", data = vaccines)$residuals
adjRocList[[i]] <- roc(vaccines$infect.y ~ resid)
}
names(resultList) <- colnames(fit$posteriors)[-1]
names(adjRocList) <- colnames(fit$posteriors)[-1]
regResult <- t(sapply(resultList, function(x) x$coefficient[2, c(1,4)]))
regResult <- data.frame(regResult)
regResult$auc <- sapply(adjRocList, function(x) x$auc)
regResult$aucPval <- pwilcox(regResult$auc * n0 * n1, n0, n1, lower.tail = FALSE)
regResult$aucQval <- p.adjust(regResult$aucPval, method = "BH")
regResult[order(regResult[, 2], decreasing = FALSE), ]
load(file = "data analysis/results/RV144cluster14gradAssign25.Robj")
subjects <- unique(preAssignment$ptid)
for(i in 1:length(subjects)) {
row <- which(fit$posteriors$ptid == subjects[i])
assign <- subset(preAssignment, ptid == subjects[i])
matching <- match(colnames(fit$posteriors[, -1]), assign[, 2])
index <- which(assign[matching, 3] == 0) + 1
fit$posteriors[row, index] <- fit$posteriors[row, index] / 100
}
plot(fit, type = "scatter")
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccination, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- rocTable(fit, vaccination, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
plot(fit, type = "graph", threshold = 0.93, fill = rocResults$auc)
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infectResults <- rocTable(fit, infect, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
func <- rowSums(fit$posteriors[, -1])
funcAUC <- roc(infect ~ func)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(funcAUC * n0 * n1, n0, n1, lower.tail = FALSE)
nfunctions <- sapply(subsets, function(x) length(gregexpr(",", paste(",", x))[[1]]))
M <- 6
weights <- nfunctions / (choose(M, nfunctions))
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weights))
polyAUC <- roc(infect ~ poly)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(polyAUC * n0 * n1, n0, n1, lower.tail = FALSE)
roc(vaccination ~ func)$auc
roc(vaccination ~ poly)$auc
group <- c(24, 21, 15, 8)
score <- rowMeans(fit$posteriors[, group])
rocfit <- roc(infect ~ score)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
ids$groupscore <- score
ids$poly <- poly
ids$func <- func
vaccines <- subset(correlates, infect.y != "PLACEBO")
vaccines$PTID <- as.character(vaccines$PTID)
ids$ptid <- as.character(ids$ptid)
vaccines <- merge(vaccines, ids, all.x = TRUE, all.y = TRUE,
by.x = "PTID", by.y = "ptid")
vaccines <- subset(vaccines, vaccines$infect != "PLACEBO")
plot(vaccines$PFS, vaccines$poly)
lines(lowess(vaccines$PFS, vaccines$poly), col = "red", lwd = 2)
cor(vaccines$PFS, vaccines$poly)
abline(v = c(0.05, .085))
abline(h = c(0.35))
target <- vaccines$poly > 0.35 & vaccines$PFS > 0.05 & vaccines$PFS < 0.085
summary(glm(infect ~ func + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
summary(glm(infect ~ poly + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
polylogpval <- summary(glm(infect ~ poly + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))$coefficients[2, 4] / 2
summary(glm(infect ~ groupscore + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
rocfit <- roc(vaccines$infect ~ vaccines$FS)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
rocfit <- roc(vaccines$infect ~ vaccines$PFS)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
vaccines <- subset(correlates, infect.y != "PLACEBO")
resultList <- list()
adjRocList <- list()
for(i in 1:(ncol(fit$posteriors) - 1)) {
vaccines$post <- NULL
post <- fit$posteriors[!is.na(infect), c(1, i + 1)]
names(post)[2] <- "post"
vaccines <- merge(vaccines, post, by.x = "PTID", by.y = "ptid", all.x = TRUE)
resultList[[i]] <- summary(glm(infect.y ~ post + IgAprim + agecat + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
resid <- lm(post ~ IgAprim + agecat + risk.medium + risk.high + sex,
data = vaccines)$residuals
infectResid <- glm(infect.y  ~ IgAprim + agecat + risk.medium + risk.high + sex,
family = "binomial", data = vaccines)$residuals
adjRocList[[i]] <- roc(vaccines$infect.y ~ resid)
}
names(resultList) <- colnames(fit$posteriors)[-1]
names(adjRocList) <- colnames(fit$posteriors)[-1]
regResult <- t(sapply(resultList, function(x) x$coefficient[2, c(1,4)]))
regResult <- data.frame(regResult)
regResult$auc <- sapply(adjRocList, function(x) x$auc)
regResult$aucPval <- pwilcox(regResult$auc * n0 * n1, n0, n1, lower.tail = FALSE)
regResult$aucQval <- p.adjust(regResult$aucPval, method = "BH")
regResult[order(regResult[, 2], decreasing = FALSE), ]
load(file = "data analysis/results/RV144cluster14gradAssign25.Robj")
subjects <- unique(preAssignment$ptid)
for(i in 1:length(subjects)) {
row <- which(fit$posteriors$ptid == subjects[i])
assign <- subset(preAssignment, ptid == subjects[i])
matching <- match(colnames(fit$posteriors[, -1]), assign[, 2])
index <- which(assign[matching, 3] == 0) + 1
fit$posteriors[row, index] <- fit$posteriors[row, index] / 100
}
plot(fit, type = "scatter")
load(file = "data analysis/results/RV144cluster14gradAssign25.Robj")
plot(fit, type = "scatter")
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccination, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- rocTable(fit, vaccination, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
plot(fit, type = "graph", threshold = 0.93, fill = rocResults$auc)
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infectResults <- rocTable(fit, infect, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
func <- rowSums(fit$posteriors[, -1])
funcAUC <- roc(infect ~ func)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(funcAUC * n0 * n1, n0, n1, lower.tail = FALSE)
nfunctions <- sapply(subsets, function(x) length(gregexpr(",", paste(",", x))[[1]]))
M <- 6
weights <- nfunctions / (choose(M, nfunctions))
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weights))
polyAUC <- roc(infect ~ poly)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(polyAUC * n0 * n1, n0, n1, lower.tail = FALSE)
roc(vaccination ~ func)$auc
roc(vaccination ~ poly)$auc
group <- c(24, 21, 15, 8)
score <- rowMeans(fit$posteriors[, group])
rocfit <- roc(infect ~ score)
pwilcox(rocfit$auc * n0 * n1, n0, n1, lower.tail = FALSE)
ids$groupscore <- score
ids$poly <- poly
ids$func <- func
vaccines <- subset(correlates, infect.y != "PLACEBO")
vaccines$PTID <- as.character(vaccines$PTID)
ids$ptid <- as.character(ids$ptid)
vaccines <- merge(vaccines, ids, all.x = TRUE, all.y = TRUE,
by.x = "PTID", by.y = "ptid")
vaccines <- subset(vaccines, vaccines$infect != "PLACEBO")
plot(vaccines$PFS, vaccines$poly)
lines(lowess(vaccines$PFS, vaccines$poly), col = "red", lwd = 2)
cor(vaccines$PFS, vaccines$poly)
abline(v = c(0.05, .085))
abline(h = c(0.35))
target <- vaccines$poly > 0.35 & vaccines$PFS > 0.05 & vaccines$PFS < 0.085
summary(glm(infect ~ func + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
summary(glm(infect ~ poly + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
polylogpval <- summary(glm(infect ~ poly + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))$coefficients[2, 4] / 2
summary(glm(infect ~ groupscore + IgAprim + risk.medium + risk.high + sex,
family = "binomial",
data = vaccines))
load(file = "data analysis/results/RV144cluster12LessDisp.Robj")
plot(fit, type = "scatter")
ids <- fit$posteriors[, 1:2]
vaccine[, 1] <- as.character(vaccine[, 1])
vaccine[, 1] <- factor(vaccine[, 1], levels = levels(ids[, 1]))
vaccine <- vaccine[!is.na(vaccine[, 1]), ]
vaccine <- vaccine[order(vaccine[, 1]), ]
ids <- merge(ids, vaccine, all.x = TRUE, all.y = FALSE,
by = "ptid", sort = FALSE)
vaccination <- ids[, 3]
rocplot <- plot(fit, target = vaccination, type = "ROC", ncols = 6,
direction = "auto", thresholdPalette = NULL,
subsets = NULL)
rocResults <- rocTable(fit, vaccination, direction = ">", adjust = "BH",
sortAUC = FALSE)
rocResults[order(rocResults$auc, decreasing = TRUE), ]
plot(fit, type = "graph", threshold = 0.93, fill = rocResults$auc)
infectDat <- data.frame(ptid = rv144_correlates_data$PTID, infect = rv144_correlates_data$infect.y)
datId <- as.character(fit$posteriors$ptid)
infectID <- as.character(infectDat$ptid)
infectDat <- infectDat[infectID %in% datId, ]
infectDat$ptid <- factor(as.character(infectDat$ptid), levels = levels(booldata$ptid))
infectDat <- infectDat[order(infectDat$ptid), ]
ids <- merge(ids, infectDat, sort = FALSE)
infect <- ids[, 4]
infect[infect == "PLACEBO"] <- NA
infectResults <- rocTable(fit, infect, direction = "auto", adjust = "BH",
sortAUC = FALSE, pvalue = "wilcoxon")
infectResults[order(infectResults$pvalue, decreasing = FALSE), ]
func <- rowSums(fit$posteriors[, -1])
funcAUC <- roc(infect ~ func)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(funcAUC * n0 * n1, n0, n1, lower.tail = FALSE)
nfunctions <- sapply(subsets, function(x) length(gregexpr(",", paste(",", x))[[1]]))
M <- 6
weights <- nfunctions / (choose(M, nfunctions))
poly <- apply(fit$posteriors[, -1], 1, function(x) weighted.mean(x, weights))
polyAUC <- roc(infect ~ poly)$auc
n0 <- sum(infect == "INFECTED", na.rm = TRUE)
n1 <- sum(infect == "NON-INFECTED", na.rm = TRUE)
pwilcox(polyAUC * n0 * n1, n0, n1, lower.tail = FALSE)
roc(vaccination ~ func)$auc
