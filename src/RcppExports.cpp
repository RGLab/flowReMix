// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// vecBetaBinomDens
NumericVector vecBetaBinomDens(NumericVector count, NumericVector N, NumericVector prob, double M);
RcppExport SEXP _flowReMix_vecBetaBinomDens(SEXP countSEXP, SEXP NSEXP, SEXP probSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type count(countSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(vecBetaBinomDens(count, N, prob, M));
    return rcpp_result_gen;
END_RCPP
}
// setNumericVectorToZero
void setNumericVectorToZero(NumericVector x);
RcppExport SEXP _flowReMix_setNumericVectorToZero(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    setNumericVectorToZero(x);
    return R_NilValue;
END_RCPP
}
// subsetAssignGibbs
NumericMatrix subsetAssignGibbs(NumericVector y, NumericVector prop, NumericVector N, NumericMatrix isingCoefs, NumericVector nullEta, NumericVector altEta, NumericMatrix covariance, int nsamp, int nSubsets, int keepEach, int intSampSize, NumericVector MHcoef, IntegerVector popInd, NumericVector unifVec, NumericVector normVec, NumericVector dispersion, bool betaDispersion, IntegerVector preAssignment, double randomAssignProb, NumericVector mprobs, double preAssignCoef, double prior, bool zeroPosteriorProbs, LogicalVector doNotSample, NumericVector init);
RcppExport SEXP _flowReMix_subsetAssignGibbs(SEXP ySEXP, SEXP propSEXP, SEXP NSEXP, SEXP isingCoefsSEXP, SEXP nullEtaSEXP, SEXP altEtaSEXP, SEXP covarianceSEXP, SEXP nsampSEXP, SEXP nSubsetsSEXP, SEXP keepEachSEXP, SEXP intSampSizeSEXP, SEXP MHcoefSEXP, SEXP popIndSEXP, SEXP unifVecSEXP, SEXP normVecSEXP, SEXP dispersionSEXP, SEXP betaDispersionSEXP, SEXP preAssignmentSEXP, SEXP randomAssignProbSEXP, SEXP mprobsSEXP, SEXP preAssignCoefSEXP, SEXP priorSEXP, SEXP zeroPosteriorProbsSEXP, SEXP doNotSampleSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prop(propSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type isingCoefs(isingCoefsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nullEta(nullEtaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type altEta(altEtaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance(covarianceSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type nSubsets(nSubsetsSEXP);
    Rcpp::traits::input_parameter< int >::type keepEach(keepEachSEXP);
    Rcpp::traits::input_parameter< int >::type intSampSize(intSampSizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHcoef(MHcoefSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type popInd(popIndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unifVec(unifVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type normVec(normVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< bool >::type betaDispersion(betaDispersionSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type preAssignment(preAssignmentSEXP);
    Rcpp::traits::input_parameter< double >::type randomAssignProb(randomAssignProbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mprobs(mprobsSEXP);
    Rcpp::traits::input_parameter< double >::type preAssignCoef(preAssignCoefSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< bool >::type zeroPosteriorProbs(zeroPosteriorProbsSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type doNotSample(doNotSampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(subsetAssignGibbs(y, prop, N, isingCoefs, nullEta, altEta, covariance, nsamp, nSubsets, keepEach, intSampSize, MHcoef, popInd, unifVec, normVec, dispersion, betaDispersion, preAssignment, randomAssignProb, mprobs, preAssignCoef, prior, zeroPosteriorProbs, doNotSample, init));
    return rcpp_result_gen;
END_RCPP
}
// simRandomEffectCoordinateMH
NumericMatrix simRandomEffectCoordinateMH(NumericVector y, NumericVector N, int i, int nsamp, int nSubsets, NumericVector MHcoef, IntegerVector assignment, IntegerVector popInd, NumericVector eta, NumericVector randomEstt, NumericVector condvar, NumericMatrix covariance, NumericMatrix invcov, NumericVector MHattempts, NumericVector MHsuccess, NumericVector unifVec, NumericVector dispersion, bool betaDispersion, int keepEach);
RcppExport SEXP _flowReMix_simRandomEffectCoordinateMH(SEXP ySEXP, SEXP NSEXP, SEXP iSEXP, SEXP nsampSEXP, SEXP nSubsetsSEXP, SEXP MHcoefSEXP, SEXP assignmentSEXP, SEXP popIndSEXP, SEXP etaSEXP, SEXP randomEsttSEXP, SEXP condvarSEXP, SEXP covarianceSEXP, SEXP invcovSEXP, SEXP MHattemptsSEXP, SEXP MHsuccessSEXP, SEXP unifVecSEXP, SEXP dispersionSEXP, SEXP betaDispersionSEXP, SEXP keepEachSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type nsamp(nsampSEXP);
    Rcpp::traits::input_parameter< int >::type nSubsets(nSubsetsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHcoef(MHcoefSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type assignment(assignmentSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type popInd(popIndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type randomEstt(randomEsttSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condvar(condvarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance(covarianceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type invcov(invcovSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHattempts(MHattemptsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHsuccess(MHsuccessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type unifVec(unifVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< bool >::type betaDispersion(betaDispersionSEXP);
    Rcpp::traits::input_parameter< int >::type keepEach(keepEachSEXP);
    rcpp_result_gen = Rcpp::wrap(simRandomEffectCoordinateMH(y, N, i, nsamp, nSubsets, MHcoef, assignment, popInd, eta, randomEstt, condvar, covariance, invcov, MHattempts, MHsuccess, unifVec, dispersion, betaDispersion, keepEach));
    return rcpp_result_gen;
END_RCPP
}
// newMHsampler
void newMHsampler(NumericMatrix assign, NumericMatrix random, NumericVector initAssign, NumericVector initRand, NumericVector y, NumericVector N, int keepEach, double prior, NumericMatrix isingCoefs, IntegerVector preAssignment, NumericMatrix invcov, NumericMatrix covariance, NumericVector condvar, NumericVector dispersion, NumericVector nullEta, NumericVector altEta, IntegerVector popInd, NumericVector MHattempts, NumericVector MHsuccess, NumericVector MHcoef);
RcppExport SEXP _flowReMix_newMHsampler(SEXP assignSEXP, SEXP randomSEXP, SEXP initAssignSEXP, SEXP initRandSEXP, SEXP ySEXP, SEXP NSEXP, SEXP keepEachSEXP, SEXP priorSEXP, SEXP isingCoefsSEXP, SEXP preAssignmentSEXP, SEXP invcovSEXP, SEXP covarianceSEXP, SEXP condvarSEXP, SEXP dispersionSEXP, SEXP nullEtaSEXP, SEXP altEtaSEXP, SEXP popIndSEXP, SEXP MHattemptsSEXP, SEXP MHsuccessSEXP, SEXP MHcoefSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type assign(assignSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type random(randomSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initAssign(initAssignSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initRand(initRandSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type keepEach(keepEachSEXP);
    Rcpp::traits::input_parameter< double >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type isingCoefs(isingCoefsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type preAssignment(preAssignmentSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type invcov(invcovSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type covariance(covarianceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type condvar(condvarSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dispersion(dispersionSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nullEta(nullEtaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type altEta(altEtaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type popInd(popIndSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHattempts(MHattemptsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHsuccess(MHsuccessSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type MHcoef(MHcoefSEXP);
    newMHsampler(assign, random, initAssign, initRand, y, N, keepEach, prior, isingCoefs, preAssignment, invcov, covariance, condvar, dispersion, nullEta, altEta, popInd, MHattempts, MHsuccess, MHcoef);
    return R_NilValue;
END_RCPP
}
// weightedMean
NumericVector weightedMean(NumericVector x, NumericVector weights, bool na_rm);
RcppExport SEXP _flowReMix_weightedMean(SEXP xSEXP, SEXP weightsSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedMean(x, weights, na_rm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_flowReMix_vecBetaBinomDens", (DL_FUNC) &_flowReMix_vecBetaBinomDens, 4},
    {"_flowReMix_setNumericVectorToZero", (DL_FUNC) &_flowReMix_setNumericVectorToZero, 1},
    {"_flowReMix_subsetAssignGibbs", (DL_FUNC) &_flowReMix_subsetAssignGibbs, 25},
    {"_flowReMix_simRandomEffectCoordinateMH", (DL_FUNC) &_flowReMix_simRandomEffectCoordinateMH, 19},
    {"_flowReMix_newMHsampler", (DL_FUNC) &_flowReMix_newMHsampler, 20},
    {"_flowReMix_weightedMean", (DL_FUNC) &_flowReMix_weightedMean, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_flowReMix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
