
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(flowReMix)
> library(magrittr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> args <- commandArgs(TRUE)
> eval(parse(text=args[[1]]))
> setting <- as.numeric(setting)
> ncores <- 4
> 
> # Loading data ----
> malbool <- readRDS("data/malaria_booleans.rds")
> names(malbool) <- tolower(names(malbool))
> 
> # Setting up stimulations -----
> malbool$subset <- with(malbool, (interaction(parent, population, sep = "/")))
> malbool$stim <- as.character(malbool$stim)
> malbool$stim[malbool$stim == "Cells Only"] <- "ctrl"
> malbool$stim[malbool$stim == "ctr SPZ"] <- "ctrl"
> malbool$stim[malbool$stim == "PfSPZ"] <- "SPZ"
> malbool$stimgroup <- "SPZ"
> malbool$stimgroup[malbool$stim %in% c("uRBC", "PfRBC")] <- "RBC"
> malbool$stim[malbool$stim == "uRBC"] <- "ctrl"
> malbool$stim <- factor(malbool$stim)
> 
> # Defining and screening subsets ---
> malbool$subset <- factor(with(malbool, (interaction(stimgroup, subset, sep = "/"))))
> 
> # Screening based on mixed models ---------
> # library(lme4)
> # subsets <- levels(malbool$subset)
> # screenResults <- data.frame(subset = subsets, pvalue = 1)
> # for(i in 1:length(subsets)) {
> #   pop <- subsets[[i]]
> #   subdat <- subset(malbool, subset == pop)
> #   subdat$sampind <- 1:nrow(subdat)
> #
> #   fullmod <- NULL
> #   try(fullmod <- glmer(cbind(count, parentcount - count) ~ stim * visitno + (1|sampind) + (1|ptid),
> #                    family = "binomial",
> #                    data = subdat))
> #   if(is.null(fullmod)) next
> #   fullLogLik <- summary(fullmod)$logLik[[1]]
> #
> #   nullmod <- NULL
> #   try(nullmod <- glmer(cbind(count, parentcount - count) ~ stim + (1|sampind) + (1|ptid),
> #                    family = "binomial",
> #                    data = subdat))
> #   if(is.null(nullmod)) next
> #   nullLoglik <- summary(nullmod)$logLik[[1]]
> #
> #   df <- nrow(summary(fullmod)$coefficients) - nrow(summary(nullmod)$coefficients)
> #   chisqStat <- 2 * (fullLogLik - nullLoglik)
> #   screenResults$pvalue[i] <- 1 - pchisq(chisqStat, df)
> #   print(screenResults[i, ])
> # }
> # saveRDS(screenResults, file = "data/malboolScreen.rds")
> screenResults <- readRDS(file = "data/malboolScreen.rds")
> screenResults <- screenResults[order(screenResults$pvalue), ]
> malbool <- subset(malbool, subset %in% screenResults[1:40, 1])
> malbool$subset <- factor(malbool$subset)
> 
> # counts <- by(malbool, list(malbool$subset), function(x) x$count)
> # dropsubsets <- sapply(counts, function(x) mean(x >= 2) < 0.15)
> # names(counts)[!dropsubsets]
> # malbool$subset <- as.character(malbool$subset)
> # malbool <- subset(malbool, subset %in% names(counts)[!dropsubsets])
> 
> # Setting correct order for visits ---
> malbool$visitno <- as.character(malbool$visitno)
> malbool$visitno[malbool$visitno %in% c("Day 13-Pos (day of blood stage parasitemia)",
+                                        "Day 14-Pos (day of blood stage parasitemia)",
+                                        "Day 19-Pos (day of blood stage parasitemia)",
+                                        "Day 11-Pos (day of blood stage parasitemia)",
+                                        "Day 17-Pos (day of blood stage parasitemia)")] <- "pos"
> malbool$visitno <- factor(malbool$visitno, levels = c("Day 0", "Day 9", "pos", "Day 28", "Day 56", "Day 168"))
> 
> # Analysis Parameters -----
> configurations <- expand.grid(iterations = c(60),
+                               mcEM = TRUE,
+                               disp = c(10, 50),
+                               npost = c(10),
+                               seed = 1:30)
> config <- configurations[setting, ]
> niter <- config[["iterations"]]
> lag <- round(niter / 3)
> mcEM <- config[["mcEM"]]
> npost <- config[["npost"]]
> seed <- config[["seed"]]
> disp <- config[["disp"]]
> stabilityReps <- 50
> 
> # Control Object --------
> control <- flowReMix_control(updateLag = lag, nsamp = 50, initMHcoef = 1,
+                              keepEach = 5,
+                              nPosteriors = npost, centerCovariance = TRUE,
+                              maxDispersion = disp * 1000, minDispersion = 10^7,
+                              randomAssignProb = 10^-8, intSampSize = 50,
+                              lastSample = NULL, isingInit = -log(99),
+                              markovChainEM = mcEM,
+                              initMethod = "robust",
+                              preAssignCoefs = 1,
+                              seed = seed,
+                              ncores = ncores,
+                              isingWprior = FALSE,
+                              zeroPosteriorProbs = FALSE,
+                              isingStabilityReps = stabilityReps,
+                              randStabilityReps = 0,
+                              learningRate = 0.75,
+                              keepWeightPercent = 0.9,
+                              sampleNew = FALSE)
> 
> malbool$allstims <- malbool$subset %>% as.character() %>%
+   strsplit("/") %>% sapply(function(x) paste(x[-1], collapse = "/")) %>%
+   factor()
> 
> # Analysis --------
> fit <- flowReMix(cbind(count, parentcount - count) ~ visitno * stim,
+                  subject_id = ptid,
+                  cell_type = allstims,
+                  cluster_variable = visitno,
+                  data = malbool,
+                  covariance = "sparse",
+                  ising_model = "sparse",
+                  regression_method = "robust",
+                  cluster_assignment = TRUE,
+                  iterations = niter,
+                  parallel = TRUE,
+                  verbose = TRUE, control = control)
Computing in parallel on 4 cores
[1] "Initializing Regression Equations"
Loading required package: foreach
Loading required package: rngtools
Loading required package: pkgmaker
Loading required package: registry

Attaching package: ‘pkgmaker’

The following object is masked from ‘package:base’:

    isNamespaceLoaded


[1] "Starting Stochastic EM"
[1] "Sampling!"
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|

[1] "Updating Ising!"
[1] "Estimating Covariance!"
          levelP1  levelP2  levelP3  levelP4  levelP5  levelP6  levelP7 
   1.000    0.174    0.008    0.010    0.131    0.019    0.014    0.188 
 levelP8  levelP9 levelP10 levelP11 levelP12 levelP13 levelP14 levelP15 
   0.167    0.052    0.019    0.185    0.038    0.021    0.012    0.009 
levelP16 levelP17 levelP18 levelP19 levelP20 levelP21 levelP22 levelP23 
   0.010    0.018    0.015    0.011    0.012    0.008    0.474    0.092 
levelP24 levelP25 levelP26 levelP27 levelP28 levelP29 levelP30 
   0.025    0.348    0.016    0.015    0.021    0.008    0.036 
      M1       M2       M3       M4       M5       M6       M7       M8 
10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 
      M9      M10      M11      M12      M13      M14      M15      M16 
10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 
     M17      M18      M19      M20      M21      M22      M23      M24 
10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 
     M25      M26      M27      M28      M29      M30 
10000000 10000000 10000000 10000000 10000000 10000000 
         [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12]
MH      0.500 1.500 1.500 0.500 0.900 1.500 0.500 0.500 0.500  1.50 1.500 1.500
ratevec 0.100 0.673 0.581 0.123 0.227 0.296 0.128 0.084 0.176  0.45 0.411 0.463
var     1.749 0.076 0.075 2.109 0.685 0.431 0.558 1.639 0.674  0.13 0.200 0.278
        [,13] [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
MH      1.500 1.500 0.900 1.500 1.500 1.500 1.500 1.500 1.500 0.500 1.500 1.100
ratevec 0.514 0.468 0.193 0.415 0.537 0.390 0.584 0.584 0.625 0.100 0.480 0.275
var     0.214 0.144 2.227 0.790 0.135 0.139 0.120 0.099 0.097 0.587 0.294 0.446
        [,25] [,26] [,27] [,28] [,29] [,30]
MH      0.500 0.900 1.100 1.500 1.500 0.900
ratevec 0.095 0.232 0.277 0.296 0.699 0.210
var     1.681 1.567 0.491 0.507 0.014 0.452
[1] "Updating Regression"
Error in { : task 8 failed - "missing value where TRUE/FALSE needed"
Calls: flowReMix -> %dorng% -> do.call -> %dopar% -> <Anonymous>
Execution halted
